{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Deividas\\\\...MyProjects\\\\LaWander\\\\Front\\\\src\\\\pages\\\\Chat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"../css/chat.css\";\n\n// Fix for default markers in react-leaflet\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require(\"leaflet/dist/images/marker-icon-2x.png\"),\n  iconUrl: require(\"leaflet/dist/images/marker-icon.png\"),\n  shadowUrl: require(\"leaflet/dist/images/marker-shadow.png\")\n});\n\n// Create custom colored icons for different marker types\nconst createCustomIcon = (color, emoji = \"📍\") => {\n  return L.divIcon({\n    className: \"custom-marker\",\n    html: `\n      <div style=\"\n        background-color: ${color};\n        width: 25px;\n        height: 25px;\n        border-radius: 50% 50% 50% 0;\n        transform: rotate(-45deg);\n        border: 2px solid white;\n        box-shadow: 0 2px 4px rgba(0,0,0,0.3);\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      \">\n        <div style=\"\n          transform: rotate(45deg);\n          color: white;\n          font-size: 12px;\n          font-weight: bold;\n        \">${emoji}</div>\n      </div>\n    `,\n    iconSize: [25, 25],\n    iconAnchor: [12, 24],\n    popupAnchor: [0, -24]\n  });\n};\n\n// Color scheme for different place types\nconst getMarkerColor = (placeType, placeName) => {\n  const name = placeName.toLowerCase();\n  if (placeType === \"destination\") {\n    return {\n      color: \"#ff69b4\",\n      emoji: \"🏙️\"\n    }; // Pink for destination\n  }\n\n  // Check for specific place categories\n  if (name.includes(\"museum\") || name.includes(\"gallery\") || name.includes(\"castle\") || name.includes(\"exhibition\")\n  //\n  ) {\n    return {\n      color: \"#8B4513\",\n      emoji: \"🏛️\"\n    }; // Brown for museums\n  }\n  if (name.includes(\"restaurant\") || name.includes(\"cafe\") || name.includes(\"bar\") || name.includes(\"food\") || name.includes(\"dining\") || name.includes(\"kitchen\") || name.includes(\"pub\") || name.includes(\"grille\") || name.includes(\"dinner\") || name.includes(\"grill\") || name.includes(\"club\")) {\n    return {\n      color: \"#DC143C\",\n      emoji: \"🍽️\"\n    }; // Red for restaurants\n  }\n  if (name.includes(\"hotel\") || name.includes(\"accommodation\") || name.includes(\"hostel\") || name.includes(\"resort\") || name.includes(\"lodge\")) {\n    return {\n      color: \"#4169E1\",\n      emoji: \"🏨\"\n    }; // Royal blue for hotels\n  }\n  if (name.includes(\"park\") || name.includes(\"garden\") || name.includes(\"nature\") || name.includes(\"forest\") || name.includes(\"beach\")) {\n    return {\n      color: \"#228B22\",\n      emoji: \"🌳\"\n    }; // Forest green for parks/nature\n  }\n  if (name.includes(\"church\") || name.includes(\"cathedral\") || name.includes(\"temple\") || name.includes(\"monastery\") || name.includes(\"mosque\") || name.includes(\"synagogue\")) {\n    return {\n      color: \"#9370DB\",\n      emoji: \"⛪\"\n    }; // Purple for religious sites\n  }\n  if (name.includes(\"shop\") || name.includes(\"market\") || name.includes(\"mall\") || name.includes(\"store\") || name.includes(\"boutique\")) {\n    return {\n      color: \"#FF8C00\",\n      emoji: \"🛍️\"\n    }; // Orange for shopping\n  }\n  if (name.includes(\"theater\") || name.includes(\"cinema\") || name.includes(\"concert\") || name.includes(\"show\") || name.includes(\"entertainment\")) {\n    return {\n      color: \"#FF1493\",\n      emoji: \"🎭\"\n    }; // Deep pink for entertainment\n  }\n\n  // Default color for other attractions\n  return {\n    color: \"#1E90FF\",\n    emoji: \"🎯\"\n  }; // Dodger blue for general attractions\n};\n\n// Generate specific description for popup\nconst getPlaceDescription = (placeName, fullAddress) => {\n  var _addressParts, _addressParts2, _addressParts$;\n  const name = placeName.toLowerCase();\n\n  // Extract city and street info from the full address\n  const addressParts = fullAddress.split(\",\");\n  const city = ((_addressParts = addressParts[addressParts.length - 3]) === null || _addressParts === void 0 ? void 0 : _addressParts.trim()) || ((_addressParts2 = addressParts[addressParts.length - 2]) === null || _addressParts2 === void 0 ? void 0 : _addressParts2.trim()) || \"Unknown\";\n  const street = ((_addressParts$ = addressParts[0]) === null || _addressParts$ === void 0 ? void 0 : _addressParts$.trim()) || \"\";\n\n  // Generate specific description based on place type and name\n  if (name.includes(\"museum\") || name.includes(\"gallery\") || name.includes(\"exhibition\")) {\n    if (name.includes(\"art\")) {\n      return `🏛️ <strong>${placeName}</strong><br>Art museum featuring local and international collections in ${city}`;\n    } else if (name.includes(\"history\") || name.includes(\"historical\")) {\n      return `🏛️ <strong>${placeName}</strong><br>Historical museum showcasing ${city}'s rich heritage and culture`;\n    } else if (name.includes(\"science\") || name.includes(\"natural\")) {\n      return `🏛️ <strong>${placeName}</strong><br>Science museum with interactive exhibits and natural history displays`;\n    } else {\n      return `🏛️ <strong>${placeName}</strong><br>Cultural institution featuring art, history, and science exhibits in ${city}`;\n    }\n  }\n  if (name.includes(\"restaurant\") || name.includes(\"cafe\") || name.includes(\"bar\") || name.includes(\"food\") || name.includes(\"dining\") || name.includes(\"kitchen\")) {\n    if (name.includes(\"cafe\") || name.includes(\"coffee\")) {\n      return `☕ <strong>${placeName}</strong><br>Cozy cafe perfect for coffee, light meals, and relaxation in ${city}`;\n    } else if (name.includes(\"bar\") || name.includes(\"pub\")) {\n      return `🍺 <strong>${placeName}</strong><br>Local bar/pub offering drinks and traditional ${city} atmosphere`;\n    } else {\n      return `🍽️ <strong>${placeName}</strong><br>Restaurant serving local cuisine and specialties in ${city}`;\n    }\n  }\n  if (name.includes(\"hotel\") || name.includes(\"accommodation\") || name.includes(\"hostel\") || name.includes(\"resort\") || name.includes(\"lodge\")) {\n    if (name.includes(\"hostel\")) {\n      return `🏨 <strong>${placeName}</strong><br>Budget-friendly hostel accommodation in the heart of ${city}`;\n    } else if (name.includes(\"resort\")) {\n      return `🏨 <strong>${placeName}</strong><br>Luxury resort with amenities and services in ${city}`;\n    } else {\n      return `🏨 <strong>${placeName}</strong><br>Hotel accommodation offering comfort and convenience in ${city}`;\n    }\n  }\n  if (name.includes(\"park\") || name.includes(\"garden\") || name.includes(\"nature\") || name.includes(\"forest\") || name.includes(\"beach\")) {\n    if (name.includes(\"botanical\") || name.includes(\"garden\")) {\n      return `🌳 <strong>${placeName}</strong><br>Botanical garden featuring diverse plant collections and peaceful walking paths`;\n    } else if (name.includes(\"national\") || name.includes(\"forest\")) {\n      return `🌲 <strong>${placeName}</strong><br>National park with hiking trails and natural beauty`;\n    } else if (name.includes(\"beach\")) {\n      return `🏖️ <strong>${placeName}</strong><br>Beautiful beach area perfect for relaxation and water activities`;\n    } else {\n      return `🌳 <strong>${placeName}</strong><br>Public park offering green spaces and recreational activities in ${city}`;\n    }\n  }\n  if (name.includes(\"church\") || name.includes(\"cathedral\") || name.includes(\"temple\") || name.includes(\"mosque\") || name.includes(\"synagogue\")) {\n    if (name.includes(\"cathedral\")) {\n      return `⛪ <strong>${placeName}</strong><br>Historic cathedral with stunning architecture and religious significance`;\n    } else if (name.includes(\"temple\")) {\n      return `🕉️ <strong>${placeName}</strong><br>Sacred temple representing spiritual heritage in ${city}`;\n    } else {\n      return `⛪ <strong>${placeName}</strong><br>Historic church with cultural and architectural importance`;\n    }\n  }\n  if (name.includes(\"shop\") || name.includes(\"market\") || name.includes(\"mall\") || name.includes(\"store\") || name.includes(\"boutique\")) {\n    if (name.includes(\"market\")) {\n      return `🛒 <strong>${placeName}</strong><br>Local market offering fresh produce and traditional goods`;\n    } else if (name.includes(\"boutique\")) {\n      return `👗 <strong>${placeName}</strong><br>Boutique shop featuring unique fashion and local crafts`;\n    } else {\n      return `🛍️ <strong>${placeName}</strong><br>Shopping destination for local goods and souvenirs in ${city}`;\n    }\n  }\n  if (name.includes(\"theater\") || name.includes(\"cinema\") || name.includes(\"concert\") || name.includes(\"show\") || name.includes(\"entertainment\")) {\n    if (name.includes(\"theater\") || name.includes(\"theatre\")) {\n      return `🎭 <strong>${placeName}</strong><br>Theater venue hosting plays, performances, and cultural events`;\n    } else if (name.includes(\"cinema\") || name.includes(\"movie\")) {\n      return `🎬 <strong>${placeName}</strong><br>Cinema showing latest films and cultural screenings`;\n    } else {\n      return `🎪 <strong>${placeName}</strong><br>Entertainment venue for shows, concerts, and performances`;\n    }\n  }\n\n  // Default for other attractions - try to be more specific based on name\n  if (name.includes(\"castle\") || name.includes(\"fortress\")) {\n    return `🏰 <strong>${placeName}</strong><br>Historic castle/fortress with rich history and architectural beauty`;\n  } else if (name.includes(\"tower\") || name.includes(\"monument\")) {\n    return `🗼 <strong>${placeName}</strong><br>Iconic landmark and monument representing ${city}'s heritage`;\n  } else if (name.includes(\"square\") || name.includes(\"plaza\")) {\n    return `🏛️ <strong>${placeName}</strong><br>Historic square/plaza in the heart of ${city}`;\n  } else {\n    return `🎯 <strong>${placeName}</strong><br>Notable attraction worth visiting during your time in ${city}`;\n  }\n};\nfunction Chat({\n  destination,\n  days,\n  onBackToWelcome\n}) {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputMessage, setInputMessage] = useState(\"\");\n  const [mapCenter, setMapCenter] = useState([51.505, -0.09]); // Default to London\n  const [destinationMarker, setDestinationMarker] = useState(null);\n  const [placeMarkers, setPlaceMarkers] = useState([]);\n  // Store refs for each marker by place name\n  const markerRefs = useRef({});\n  const messagesEndRef = React.useRef(null);\n  const itineraryRunRef = React.useRef(\"\");\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n\n  // Extract place names from text (format: **PlaceName**)\n  const extractPlaceNames = text => {\n    console.log(\"Extracting place names from text:\", text);\n    const regex = /\\*\\*(.*?)\\*\\*/g;\n    const matches = [];\n    let match;\n    while ((match = regex.exec(text)) !== null) {\n      matches.push(match[1].trim());\n    }\n    console.log(\"Found matches:\", matches);\n    return matches;\n  };\n\n  // Extract place descriptions from AI response text\n  const extractPlaceDescriptions = (text, placeNames) => {\n    const descriptions = {};\n\n    // Split text into sentences for better parsing\n    const sentences = text.split(/[.!?]+/).map(s => s.trim()).filter(s => s.length > 0);\n    placeNames.forEach(placeName => {\n      // Look for sentences that mention this place\n      const relevantSentences = sentences.filter(sentence => sentence.toLowerCase().includes(placeName.toLowerCase()));\n      if (relevantSentences.length > 0) {\n        // Take the first relevant sentence and clean it up\n        let description = relevantSentences[0];\n\n        // Remove the place name from the beginning if it's there\n        description = description.replace(new RegExp(`\\\\*\\\\*${placeName}\\\\*\\\\*`, \"gi\"), \"\").trim();\n\n        // Remove colons from the description\n        description = description.replace(/:/g, \"\");\n\n        // Remove common prefixes\n        description = description.replace(/^(is|are|was|were|has|have|had|will|would|can|could|should|may|might)\\s+/i, \"\");\n\n        // Capitalize first letter\n        description = description.charAt(0).toUpperCase() + description.slice(1);\n\n        // Use the entire first sentence (no length limit)\n        descriptions[placeName] = description;\n      }\n    });\n    console.log(\"Extracted place descriptions:\", descriptions);\n    return descriptions;\n  };\n\n  // Format message text to highlight only found place names (case-insensitive)\n  const formatMessageText = (text, foundPlaces = []) => {\n    if (foundPlaces.length === 0) {\n      // If no places were found, don't highlight any\n      return text.replace(/\\*\\*(.*?)\\*\\*/g, \"$1\");\n    }\n\n    // Only highlight places that were actually found on the map (case-insensitive)\n    const foundLower = foundPlaces.map(p => p.toLowerCase());\n    return text.replace(/\\*\\*(.*?)\\*\\*/g, (match, placeName) => {\n      const trimmedPlaceName = placeName.trim();\n      if (foundLower.includes(trimmedPlaceName.toLowerCase())) {\n        // Add a clickable span with a data attribute\n        return `<span class=\"place-name clickable-place\" data-place=\"${trimmedPlaceName}\">${placeName}</span>`;\n      } else {\n        return placeName; // Don't highlight if not found\n      }\n    });\n  };\n\n  // Format itinerary into HTML grouped by days, each item on a new line\n  const formatItineraryToHtml = rawText => {\n    if (!rawText) return \"\";\n    const normalized = rawText.replace(/\\r\\n/g, \"\\n\");\n    const lines = normalized.split(\"\\n\").map(l => l.replace(/^\\s*###\\s*/i, \"\").trim()); // remove leading ###\n\n    const daySections = [];\n    let current = null;\n    const dayHeaderRegex = /^#*\\s*day\\s*(\\d+)(?::|-)?\\s*(.*)$/i;\n    const pushCurrent = () => {\n      if (current) {\n        // Remove empty items\n        current.items = current.items.filter(i => i.trim().length > 0);\n        daySections.push(current);\n        current = null;\n      }\n    };\n    for (let rawLine of lines) {\n      if (!rawLine) continue;\n      // Remove leading bullet markers for both headers and items, e.g. \"* Day 1:\" or \"- Visit ...\"\n      let line = rawLine.replace(/^[-*•]\\s*/, \"\").trim();\n      if (!line) continue;\n      const m = line.match(dayHeaderRegex);\n      if (m) {\n        pushCurrent();\n        const dayNum = m[1];\n        const rest = (m[2] || \"\").trim();\n        current = {\n          title: `Day ${dayNum}${rest ? `: ${rest}` : \"\"}`,\n          items: []\n        };\n        continue;\n      }\n      // Ignore preface lines before the first Day header\n      if (!current) continue;\n      // Treat bullet points or sentences as items\n      const cleaned = line.replace(/^[-*•]\\s*/, \"\");\n      current.items.push(cleaned);\n    }\n    pushCurrent();\n    if (daySections.length === 0) {\n      return normalized.split(\"\\n\").filter(l => l.trim().length > 0).map(l => l.replace(/^\\s*###\\s*/i, \"\")).join(\"<br/>\");\n    }\n    const html = daySections.map(d => {\n      const itemsHtml = d.items.join(\"<br/>\");\n      return `<p style=\\\"margin: 0 0 14px 0;\\\"><strong>${d.title}</strong><br/>${itemsHtml}</p>`;\n    }).join(\"\\n\");\n    return html;\n  };\n\n  // Geocode multiple places and add them to the map (parallelized for speed)\n  const geocodePlaces = async (placeNames, placeDescriptions = {}) => {\n    console.log(\"Geocoding places (parallel):\", placeNames);\n    console.log(\"Place descriptions:\", placeDescriptions);\n    const newMarkers = [];\n    const foundPlaces = [];\n\n    // Helper to geocode a single place (same logic as before)\n    const geocodeSinglePlace = async placeName => {\n      try {\n        // Always include city and country in search queries\n        const city = destination;\n        const country = \"Lithuania\";\n        const searchQueries = [`${placeName}, ${city}, ${country}`, `${placeName}, ${city}`, `${placeName} ${city} ${country}`, `${placeName} ${city}`, `${placeName}`];\n        if (placeName.toLowerCase().includes(\"museum\")) {\n          const nameWithoutMuseum = placeName.replace(/museum/gi, \"\").trim();\n          if (nameWithoutMuseum) {\n            searchQueries.push(`${nameWithoutMuseum}, ${city}, ${country}`);\n            searchQueries.push(`${nameWithoutMuseum} museum, ${city}, ${country}`);\n            searchQueries.push(`${nameWithoutMuseum}, ${city}`);\n          }\n          const mainName = placeName.split(\":\")[0].split(\"(\")[0].trim();\n          if (mainName !== placeName) {\n            searchQueries.push(`${mainName}, ${city}, ${country}`);\n            searchQueries.push(`${mainName} museum, ${city}, ${country}`);\n            searchQueries.push(`${mainName}, ${city}`);\n          }\n        }\n        let found = false;\n        for (const query of searchQueries) {\n          const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}&limit=5&addressdetails=1`);\n          const data = await response.json();\n          if (data && data.length > 0) {\n            // Filter by address details for exact city and country match\n            const localResults = data.filter(item => {\n              var _addressDetails$city, _addressDetails$town, _addressDetails$villa, _addressDetails$munic, _addressDetails$count;\n              const addressDetails = item.address || {};\n              const cityMatch = ((_addressDetails$city = addressDetails.city) === null || _addressDetails$city === void 0 ? void 0 : _addressDetails$city.toLowerCase()) === city.toLowerCase() || ((_addressDetails$town = addressDetails.town) === null || _addressDetails$town === void 0 ? void 0 : _addressDetails$town.toLowerCase()) === city.toLowerCase() || ((_addressDetails$villa = addressDetails.village) === null || _addressDetails$villa === void 0 ? void 0 : _addressDetails$villa.toLowerCase()) === city.toLowerCase() || ((_addressDetails$munic = addressDetails.municipality) === null || _addressDetails$munic === void 0 ? void 0 : _addressDetails$munic.toLowerCase()) === city.toLowerCase();\n              const countryMatch = ((_addressDetails$count = addressDetails.country) === null || _addressDetails$count === void 0 ? void 0 : _addressDetails$count.toLowerCase()) === country.toLowerCase();\n              return cityMatch && countryMatch;\n            });\n            const resultsToUse = localResults.length > 0 ? localResults : data;\n            const bestMatch = resultsToUse.find(item => item.display_name.toLowerCase().includes(placeName.toLowerCase()) || item.display_name.toLowerCase().includes(city.toLowerCase())) || resultsToUse[0];\n            if (bestMatch) {\n              const {\n                lat,\n                lon,\n                display_name\n              } = bestMatch;\n              const coordinates = [parseFloat(lat), parseFloat(lon)];\n              newMarkers.push({\n                position: coordinates,\n                popup: `${placeName}<br><small>${display_name}</small>`,\n                type: \"place\",\n                placeName: placeName,\n                fullAddress: display_name,\n                aiDescription: placeDescriptions[placeName] || null\n              });\n              foundPlaces.push(placeName);\n              found = true;\n              break;\n            }\n          }\n        }\n        if (!found) {\n          // Fallback: Try to find any museum in the destination city\n          if (placeName.toLowerCase().includes(\"museum\")) {\n            try {\n              const fallbackResponse = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=museum+${encodeURIComponent(destination)}+lithuania&limit=5&addressdetails=1`);\n              const fallbackData = await fallbackResponse.json();\n              if (fallbackData && fallbackData.length > 0) {\n                const availableMuseums = fallbackData.filter(museum => !newMarkers.some(marker => marker.popup.toLowerCase().includes(museum.display_name.toLowerCase().split(\",\")[0].toLowerCase())));\n                if (availableMuseums.length > 0) {\n                  const museum = availableMuseums[0];\n                  const coordinates = [parseFloat(museum.lat), parseFloat(museum.lon)];\n                  newMarkers.push({\n                    position: coordinates,\n                    popup: `${placeName} (${museum.display_name.split(\",\")[0]})<br><small>${museum.display_name}</small>`,\n                    type: \"place\",\n                    placeName: placeName,\n                    fullAddress: museum.display_name,\n                    aiDescription: placeDescriptions[placeName] || null\n                  });\n                  foundPlaces.push(placeName);\n                }\n              }\n            } catch (fallbackError) {}\n          } else {\n            try {\n              const generalFallbackResponse = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(placeName)}+${encodeURIComponent(destination)}+lithuania&limit=3&addressdetails=1`);\n              const generalFallbackData = await generalFallbackResponse.json();\n              if (generalFallbackData && generalFallbackData.length > 0) {\n                const localFallbackResults = generalFallbackData.filter(item => {\n                  const address = item.display_name.toLowerCase();\n                  return address.includes(destination.toLowerCase()) && (address.includes(\"lithuania\") || address.includes(\"lt\"));\n                });\n                if (localFallbackResults.length > 0) {\n                  const fallbackItem = localFallbackResults[0];\n                  const coordinates = [parseFloat(fallbackItem.lat), parseFloat(fallbackItem.lon)];\n                  newMarkers.push({\n                    position: coordinates,\n                    popup: `${placeName}<br><small>${fallbackItem.display_name}</small>`,\n                    type: \"place\",\n                    placeName: placeName,\n                    fullAddress: fallbackItem.display_name,\n                    aiDescription: placeDescriptions[placeName] || null\n                  });\n                  foundPlaces.push(placeName);\n                }\n              }\n            } catch (generalFallbackError) {}\n          }\n        }\n      } catch (error) {\n        // Ignore error for this place\n      }\n    };\n\n    // Limit concurrency to 3 geocoding requests at a time\n    const concurrency = 3;\n    let idx = 0;\n    const results = [];\n    async function runBatch() {\n      const batch = [];\n      for (let i = 0; i < concurrency && idx < placeNames.length; i++, idx++) {\n        batch.push(geocodeSinglePlace(placeNames[idx]));\n      }\n      await Promise.all(batch);\n      if (idx < placeNames.length) {\n        // Small delay between batches to avoid rate limiting\n        await new Promise(resolve => setTimeout(resolve, 300));\n        return runBatch();\n      }\n    }\n    await runBatch();\n    if (newMarkers.length > 0) {\n      setPlaceMarkers(prev => {\n        // Deduplicate by placeName\n        const allMarkers = [...prev, ...newMarkers];\n        const seen = new Set();\n        return allMarkers.filter(m => {\n          if (seen.has(m.placeName)) return false;\n          seen.add(m.placeName);\n          return true;\n        });\n      });\n      console.log(`✅ Added ${newMarkers.length} new markers to map`);\n      console.log(`   Markers added:`, newMarkers.map(m => m.placeName));\n    } else {\n      console.log(\"❌ No new markers were added\");\n    }\n    const notFoundPlaces = placeNames.filter(name => !foundPlaces.includes(name));\n    if (notFoundPlaces.length > 0) {\n      console.log(`⚠️ Places mentioned in chat but not found on map:`, notFoundPlaces);\n    }\n    console.log(\"✅ Found places for highlighting:\", foundPlaces);\n    return foundPlaces;\n  };\n\n  // Geocode destination to get coordinates\n  const geocodeDestination = React.useCallback(async destinationName => {\n    try {\n      console.log(\"Geocoding destination:\", destinationName);\n      const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(destinationName)}&limit=1`);\n      const data = await response.json();\n      console.log(\"Geocoding response:\", data);\n      if (data && data.length > 0) {\n        const {\n          lat,\n          lon\n        } = data[0];\n        const coordinates = [parseFloat(lat), parseFloat(lon)];\n        console.log(\"Found coordinates:\", coordinates);\n\n        // Update map center to destination\n        setMapCenter(coordinates);\n\n        // Set destination marker only\n        setDestinationMarker({\n          position: coordinates,\n          popup: `${destinationName} - Your destination for ${days} days`,\n          type: \"destination\",\n          placeName: destinationName,\n          fullAddress: `${destinationName}, ${data[0].display_name}`\n        });\n        return coordinates;\n      } else {\n        console.log(\"No results found for:\", destinationName);\n      }\n    } catch (error) {\n      console.error(\"Geocoding error:\", error);\n    }\n    return null;\n  }, [days]);\n  useEffect(() => {\n    // Geocode destination and update map\n    if (destination) {\n      geocodeDestination(destination);\n    }\n\n    // Generate an initial AI itinerary and place it above the welcome message\n    (async () => {\n      if (!destination || !days) return;\n      const runKey = `${String(destination).trim().toLowerCase()}|${String(days).trim()}`;\n      if (itineraryRunRef.current === runKey) {\n        console.log(\"⏭️ Skipping duplicate itinerary generation for\", runKey);\n        return;\n      }\n      itineraryRunRef.current = runKey;\n      try {\n        // Show a loading message at the top\n        setMessages([{\n          id: 0,\n          text: \"Generating your itinerary...\",\n          sender: \"ai\",\n          timestamp: new Date().toLocaleTimeString(),\n          isLoading: true\n        }]);\n        console.log(\"🔰 Starting itinerary generation for\", destination, days);\n        const itineraryPrompt = `Create a concise, practical ${days}-day travel itinerary for ${destination}.\n\nREQUIREMENTS:\n- Only include places in or very near ${destination}\n- For every attraction, museum, park, restaurant, cafe, bar, etc., wrap the exact place name in **double asterisks** like **Exact Place Name**\n- Provide 3-6 items per day, with short descriptions (1 sentence each)\n- Mix of sights, food, and optional evening ideas where appropriate\n- No generic placeholders; use real places in ${destination}\n- Keep it compact and readable\n`;\n        const response = await fetch(\"http://localhost:8080/api/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            message: itineraryPrompt\n          })\n        });\n        if (!response.ok) throw new Error(`HTTP error ${response.status}`);\n        const data = await response.json();\n\n        // Extract and geocode places from itinerary\n        const placeNames = extractPlaceNames(data.message);\n        const placeDescriptions = extractPlaceDescriptions(data.message, placeNames);\n        let foundPlaces = [];\n        if (placeNames.length > 0) {\n          foundPlaces = await geocodePlaces(placeNames, placeDescriptions);\n        }\n\n        // Replace loading with itinerary (formatted) followed by a single welcome message\n        const welcomeMessage = {\n          id: 1,\n          text: `Welcome! I'll help you plan your ${days}-day trip to ${destination}. What would you like to know about your destination?`,\n          sender: \"ai\",\n          timestamp: new Date().toLocaleTimeString(),\n          isWelcome: true\n        };\n        setMessages([{\n          id: 0,\n          text: `Here is a suggested ${days}-day itinerary for ${destination}:<br/><br/>${formatItineraryToHtml(data.message)}`,\n          sender: \"ai\",\n          timestamp: new Date().toLocaleTimeString(),\n          foundPlaces,\n          isItinerary: true\n        }, welcomeMessage]);\n      } catch (err) {\n        console.error(\"Failed to generate itinerary:\", err);\n        // Replace loading with an error notice and a single welcome message\n        const welcomeMessage = {\n          id: 1,\n          text: `Welcome! I'll help you plan your ${days}-day trip to ${destination}. What would you like to know about your destination?`,\n          sender: \"ai\",\n          timestamp: new Date().toLocaleTimeString(),\n          isWelcome: true\n        };\n        setMessages([{\n          id: 0,\n          text: \"Could not generate itinerary automatically. You can ask for suggestions in the chat.\",\n          sender: \"ai\",\n          timestamp: new Date().toLocaleTimeString()\n        }, welcomeMessage]);\n      }\n    })();\n  }, [destination, days, geocodeDestination]);\n\n  // Handler to open marker popup when a highlighted place name is clicked\n  useEffect(() => {\n    scrollToBottom();\n    const handleClick = e => {\n      const target = e.target;\n      if (target.classList.contains(\"clickable-place\")) {\n        const placeName = target.getAttribute(\"data-place\");\n        // Find the marker ref and open its popup\n        const ref = markerRefs.current[placeName];\n        if (ref && ref.current && ref.current.openPopup) {\n          ref.current.openPopup();\n        }\n      }\n    };\n    document.addEventListener(\"click\", handleClick);\n    return () => {\n      document.removeEventListener(\"click\", handleClick);\n    };\n  }, [messages, placeMarkers]);\n  const handleSendMessage = async e => {\n    e.preventDefault();\n    if (!inputMessage.trim()) return;\n    const newMessage = {\n      id: messages.length + 1,\n      text: inputMessage,\n      sender: \"user\",\n      timestamp: new Date().toLocaleTimeString()\n    };\n    setMessages([...messages, newMessage]);\n    const userMessage = inputMessage;\n    setInputMessage(\"\");\n\n    // Add loading message\n    const loadingMessage = {\n      id: messages.length + 2,\n      text: \"LaWander is thinking...\",\n      sender: \"ai\",\n      timestamp: new Date().toLocaleTimeString(),\n      isLoading: true\n    };\n    setMessages(prev => [...prev, loadingMessage]);\n    try {\n      // Add destination context to the message with more specific instructions\n      const contextualMessage = `Context: The user is planning a ${days}-day trip to ${destination}. \n\nIMPORTANT INSTRUCTIONS:\n- If the user asks for a specific type of place (restaurants, museums, hotels, etc.), ONLY provide places of that exact type\n- ALL places must be located in or very near ${destination}\n- When mentioning places, use the format **PlaceName** for each place\n- Be specific and accurate about locations - only include places that are actually in ${destination}\n- For each place you mention, provide a brief description (1-2 sentences) about what makes it special or what it offers\n- Include practical information like cuisine type, atmosphere, or unique features\n\nUser question: ${userMessage}`;\n\n      // Call backend API\n      const response = await fetch(\"http://localhost:8080/api/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: contextualMessage\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n\n      // Extract place names from AI response (format: **PlaceName**)\n      const placeNames = extractPlaceNames(data.message);\n      console.log(\"AI Response:\", data.message);\n      console.log(\"Extracted place names:\", placeNames);\n\n      // Extract place descriptions from AI response\n      const placeDescriptions = extractPlaceDescriptions(data.message, placeNames);\n\n      // Geocode the places and add them to the map\n      let foundPlaces = [];\n      if (placeNames.length > 0) {\n        console.log(\"Starting geocoding for\", placeNames.length, \"places\");\n        foundPlaces = await geocodePlaces(placeNames, placeDescriptions);\n      } else {\n        console.log(\"No place names found in AI response\");\n      }\n\n      // Remove loading message and add real response\n      setMessages(prev => {\n        const withoutLoading = prev.filter(msg => !msg.isLoading);\n        const aiResponse = {\n          id: withoutLoading.length + 1,\n          text: data.message,\n          sender: \"ai\",\n          timestamp: new Date().toLocaleTimeString(),\n          foundPlaces: foundPlaces // Store found places for highlighting\n        };\n        return [...withoutLoading, aiResponse];\n      });\n    } catch (error) {\n      console.error(\"Error calling chat API:\", error);\n\n      // Remove loading message and add error response\n      setMessages(prev => {\n        const withoutLoading = prev.filter(msg => !msg.isLoading);\n        const errorResponse = {\n          id: withoutLoading.length + 1,\n          text: \"Sorry, I'm having trouble connecting to the server. Please try again later.\",\n          sender: \"ai\",\n          timestamp: new Date().toLocaleTimeString()\n        };\n        return [...withoutLoading, errorResponse];\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-left\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"back-button\",\n          onClick: onBackToWelcome,\n          children: \"\\u2190 Change Trip\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 897,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"chat-title\",\n          children: \"LaWander\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 900,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 896,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"trip-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"destination\",\n          children: destination\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 903,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"days\",\n          children: [days, \" days\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 904,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 902,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 895,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-window\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages-container\",\n          children: [messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message ${message.sender === \"user\" ? \"user-message\" : \"ai-message\"}`,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `message-content ${message.isLoading ? \"loading\" : \"\"} ${message.isItinerary ? \"itinerary\" : \"\"}`,\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                dangerouslySetInnerHTML: {\n                  __html: formatMessageText(message.text, message.foundPlaces)\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 921,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"message-time\",\n                children: message.timestamp\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 929,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 917,\n              columnNumber: 17\n            }, this)\n          }, message.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 912,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 933,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 910,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"message-form\",\n          onSubmit: handleSendMessage,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: inputMessage,\n            onChange: e => setInputMessage(e.target.value),\n            placeholder: \"Ask about your destination...\",\n            className: \"message-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 937,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"send-button\",\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 944,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 936,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 909,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-container\",\n        children: /*#__PURE__*/_jsxDEV(MapContainer, {\n          center: mapCenter,\n          zoom: 13,\n          style: {\n            height: \"100%\",\n            width: \"100%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n            attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n            url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 957,\n            columnNumber: 13\n          }, this), destinationMarker && (() => {\n            const colorInfo = getMarkerColor(destinationMarker.type, destinationMarker.placeName);\n            const popupContent = `🏙️ <strong>${destinationMarker.placeName}</strong><br><small>Your destination for ${days} days</small>`;\n            return /*#__PURE__*/_jsxDEV(Marker, {\n              position: destinationMarker.position,\n              icon: createCustomIcon(colorInfo.color, colorInfo.emoji),\n              children: /*#__PURE__*/_jsxDEV(Popup, {\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  dangerouslySetInnerHTML: {\n                    __html: popupContent\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 972,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 971,\n                columnNumber: 19\n              }, this)\n            }, \"destination\", false, {\n              fileName: _jsxFileName,\n              lineNumber: 966,\n              columnNumber: 17\n            }, this);\n          })(), placeMarkers.map((marker, index) => {\n            const colorInfo = getMarkerColor(marker.type, marker.placeName);\n            let popupContent;\n            if (marker.aiDescription) {\n              popupContent = `${colorInfo.emoji} <strong>${marker.placeName}</strong><br>${marker.aiDescription}`;\n            } else {\n              const description = getPlaceDescription(marker.placeName, marker.fullAddress);\n              popupContent = description;\n            }\n            // Create a ref for each marker\n            if (!markerRefs.current[marker.placeName]) {\n              markerRefs.current[marker.placeName] = /*#__PURE__*/React.createRef();\n            }\n            return /*#__PURE__*/_jsxDEV(Marker, {\n              position: marker.position,\n              icon: createCustomIcon(colorInfo.color, colorInfo.emoji),\n              ref: markerRefs.current[marker.placeName],\n              children: /*#__PURE__*/_jsxDEV(Popup, {\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  dangerouslySetInnerHTML: {\n                    __html: popupContent\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1002,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1001,\n                columnNumber: 19\n              }, this)\n            }, marker.placeName + index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 995,\n              columnNumber: 17\n            }, this);\n          })]\n        }, `${mapCenter[0]}-${mapCenter[1]}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 951,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 950,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 908,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 894,\n    columnNumber: 5\n  }, this);\n}\n_s(Chat, \"AqiR9686Kr2GkeHotaFMHNAz/MI=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","MapContainer","TileLayer","Marker","Popup","L","jsxDEV","_jsxDEV","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","createCustomIcon","color","emoji","divIcon","className","html","iconSize","iconAnchor","popupAnchor","getMarkerColor","placeType","placeName","name","toLowerCase","includes","getPlaceDescription","fullAddress","_addressParts","_addressParts2","_addressParts$","addressParts","split","city","length","trim","street","Chat","destination","days","onBackToWelcome","_s","messages","setMessages","inputMessage","setInputMessage","mapCenter","setMapCenter","destinationMarker","setDestinationMarker","placeMarkers","setPlaceMarkers","markerRefs","messagesEndRef","itineraryRunRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","extractPlaceNames","text","console","log","regex","matches","match","exec","push","extractPlaceDescriptions","placeNames","descriptions","sentences","map","s","filter","forEach","relevantSentences","sentence","description","replace","RegExp","charAt","toUpperCase","slice","formatMessageText","foundPlaces","foundLower","p","trimmedPlaceName","formatItineraryToHtml","rawText","normalized","lines","l","daySections","dayHeaderRegex","pushCurrent","items","i","rawLine","line","m","dayNum","rest","title","cleaned","join","d","itemsHtml","geocodePlaces","placeDescriptions","newMarkers","geocodeSinglePlace","country","searchQueries","nameWithoutMuseum","mainName","found","query","response","fetch","encodeURIComponent","data","json","localResults","item","_addressDetails$city","_addressDetails$town","_addressDetails$villa","_addressDetails$munic","_addressDetails$count","addressDetails","address","cityMatch","town","village","municipality","countryMatch","resultsToUse","bestMatch","find","display_name","lat","lon","coordinates","parseFloat","position","popup","type","aiDescription","fallbackResponse","fallbackData","availableMuseums","museum","some","marker","fallbackError","generalFallbackResponse","generalFallbackData","localFallbackResults","fallbackItem","generalFallbackError","error","concurrency","idx","results","runBatch","batch","Promise","all","resolve","setTimeout","prev","allMarkers","seen","Set","has","add","notFoundPlaces","geocodeDestination","useCallback","destinationName","runKey","String","id","sender","timestamp","Date","toLocaleTimeString","isLoading","itineraryPrompt","method","headers","body","JSON","stringify","message","ok","Error","status","welcomeMessage","isWelcome","isItinerary","err","handleClick","e","target","classList","contains","getAttribute","ref","openPopup","document","addEventListener","removeEventListener","handleSendMessage","preventDefault","newMessage","userMessage","loadingMessage","contextualMessage","withoutLoading","msg","aiResponse","errorResponse","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","dangerouslySetInnerHTML","__html","onSubmit","value","onChange","placeholder","center","zoom","style","height","width","attribution","url","colorInfo","popupContent","icon","index","createRef","_c","$RefreshReg$"],"sources":["C:/Users/Deividas/...MyProjects/LaWander/Front/src/pages/Chat.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport \"../css/chat.css\";\r\n\r\n// Fix for default markers in react-leaflet\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\nL.Icon.Default.mergeOptions({\r\n  iconRetinaUrl: require(\"leaflet/dist/images/marker-icon-2x.png\"),\r\n  iconUrl: require(\"leaflet/dist/images/marker-icon.png\"),\r\n  shadowUrl: require(\"leaflet/dist/images/marker-shadow.png\"),\r\n});\r\n\r\n// Create custom colored icons for different marker types\r\nconst createCustomIcon = (color, emoji = \"📍\") => {\r\n  return L.divIcon({\r\n    className: \"custom-marker\",\r\n    html: `\r\n      <div style=\"\r\n        background-color: ${color};\r\n        width: 25px;\r\n        height: 25px;\r\n        border-radius: 50% 50% 50% 0;\r\n        transform: rotate(-45deg);\r\n        border: 2px solid white;\r\n        box-shadow: 0 2px 4px rgba(0,0,0,0.3);\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n      \">\r\n        <div style=\"\r\n          transform: rotate(45deg);\r\n          color: white;\r\n          font-size: 12px;\r\n          font-weight: bold;\r\n        \">${emoji}</div>\r\n      </div>\r\n    `,\r\n    iconSize: [25, 25],\r\n    iconAnchor: [12, 24],\r\n    popupAnchor: [0, -24],\r\n  });\r\n};\r\n\r\n// Color scheme for different place types\r\nconst getMarkerColor = (placeType, placeName) => {\r\n  const name = placeName.toLowerCase();\r\n\r\n  if (placeType === \"destination\") {\r\n    return { color: \"#ff69b4\", emoji: \"🏙️\" }; // Pink for destination\r\n  }\r\n\r\n  // Check for specific place categories\r\n  if (\r\n    name.includes(\"museum\") ||\r\n    name.includes(\"gallery\") ||\r\n    name.includes(\"castle\") ||\r\n    name.includes(\"exhibition\")\r\n    //\r\n  ) {\r\n    return { color: \"#8B4513\", emoji: \"🏛️\" }; // Brown for museums\r\n  }\r\n\r\n  if (\r\n    name.includes(\"restaurant\") ||\r\n    name.includes(\"cafe\") ||\r\n    name.includes(\"bar\") ||\r\n    name.includes(\"food\") ||\r\n    name.includes(\"dining\") ||\r\n    name.includes(\"kitchen\") ||\r\n    name.includes(\"pub\") ||\r\n    name.includes(\"grille\") ||\r\n    name.includes(\"dinner\") ||\r\n    name.includes(\"grill\") ||\r\n    name.includes(\"club\")\r\n  ) {\r\n    return { color: \"#DC143C\", emoji: \"🍽️\" }; // Red for restaurants\r\n  }\r\n\r\n  if (\r\n    name.includes(\"hotel\") ||\r\n    name.includes(\"accommodation\") ||\r\n    name.includes(\"hostel\") ||\r\n    name.includes(\"resort\") ||\r\n    name.includes(\"lodge\")\r\n  ) {\r\n    return { color: \"#4169E1\", emoji: \"🏨\" }; // Royal blue for hotels\r\n  }\r\n\r\n  if (\r\n    name.includes(\"park\") ||\r\n    name.includes(\"garden\") ||\r\n    name.includes(\"nature\") ||\r\n    name.includes(\"forest\") ||\r\n    name.includes(\"beach\")\r\n  ) {\r\n    return { color: \"#228B22\", emoji: \"🌳\" }; // Forest green for parks/nature\r\n  }\r\n\r\n  if (\r\n    name.includes(\"church\") ||\r\n    name.includes(\"cathedral\") ||\r\n    name.includes(\"temple\") ||\r\n    name.includes(\"monastery\") ||\r\n    name.includes(\"mosque\") ||\r\n    name.includes(\"synagogue\")\r\n  ) {\r\n    return { color: \"#9370DB\", emoji: \"⛪\" }; // Purple for religious sites\r\n  }\r\n\r\n  if (\r\n    name.includes(\"shop\") ||\r\n    name.includes(\"market\") ||\r\n    name.includes(\"mall\") ||\r\n    name.includes(\"store\") ||\r\n    name.includes(\"boutique\")\r\n  ) {\r\n    return { color: \"#FF8C00\", emoji: \"🛍️\" }; // Orange for shopping\r\n  }\r\n\r\n  if (\r\n    name.includes(\"theater\") ||\r\n    name.includes(\"cinema\") ||\r\n    name.includes(\"concert\") ||\r\n    name.includes(\"show\") ||\r\n    name.includes(\"entertainment\")\r\n  ) {\r\n    return { color: \"#FF1493\", emoji: \"🎭\" }; // Deep pink for entertainment\r\n  }\r\n\r\n  // Default color for other attractions\r\n  return { color: \"#1E90FF\", emoji: \"🎯\" }; // Dodger blue for general attractions\r\n};\r\n\r\n// Generate specific description for popup\r\nconst getPlaceDescription = (placeName, fullAddress) => {\r\n  const name = placeName.toLowerCase();\r\n\r\n  // Extract city and street info from the full address\r\n  const addressParts = fullAddress.split(\",\");\r\n  const city =\r\n    addressParts[addressParts.length - 3]?.trim() ||\r\n    addressParts[addressParts.length - 2]?.trim() ||\r\n    \"Unknown\";\r\n  const street = addressParts[0]?.trim() || \"\";\r\n\r\n  // Generate specific description based on place type and name\r\n  if (\r\n    name.includes(\"museum\") ||\r\n    name.includes(\"gallery\") ||\r\n    name.includes(\"exhibition\")\r\n  ) {\r\n    if (name.includes(\"art\")) {\r\n      return `🏛️ <strong>${placeName}</strong><br>Art museum featuring local and international collections in ${city}`;\r\n    } else if (name.includes(\"history\") || name.includes(\"historical\")) {\r\n      return `🏛️ <strong>${placeName}</strong><br>Historical museum showcasing ${city}'s rich heritage and culture`;\r\n    } else if (name.includes(\"science\") || name.includes(\"natural\")) {\r\n      return `🏛️ <strong>${placeName}</strong><br>Science museum with interactive exhibits and natural history displays`;\r\n    } else {\r\n      return `🏛️ <strong>${placeName}</strong><br>Cultural institution featuring art, history, and science exhibits in ${city}`;\r\n    }\r\n  }\r\n\r\n  if (\r\n    name.includes(\"restaurant\") ||\r\n    name.includes(\"cafe\") ||\r\n    name.includes(\"bar\") ||\r\n    name.includes(\"food\") ||\r\n    name.includes(\"dining\") ||\r\n    name.includes(\"kitchen\")\r\n  ) {\r\n    if (name.includes(\"cafe\") || name.includes(\"coffee\")) {\r\n      return `☕ <strong>${placeName}</strong><br>Cozy cafe perfect for coffee, light meals, and relaxation in ${city}`;\r\n    } else if (name.includes(\"bar\") || name.includes(\"pub\")) {\r\n      return `🍺 <strong>${placeName}</strong><br>Local bar/pub offering drinks and traditional ${city} atmosphere`;\r\n    } else {\r\n      return `🍽️ <strong>${placeName}</strong><br>Restaurant serving local cuisine and specialties in ${city}`;\r\n    }\r\n  }\r\n\r\n  if (\r\n    name.includes(\"hotel\") ||\r\n    name.includes(\"accommodation\") ||\r\n    name.includes(\"hostel\") ||\r\n    name.includes(\"resort\") ||\r\n    name.includes(\"lodge\")\r\n  ) {\r\n    if (name.includes(\"hostel\")) {\r\n      return `🏨 <strong>${placeName}</strong><br>Budget-friendly hostel accommodation in the heart of ${city}`;\r\n    } else if (name.includes(\"resort\")) {\r\n      return `🏨 <strong>${placeName}</strong><br>Luxury resort with amenities and services in ${city}`;\r\n    } else {\r\n      return `🏨 <strong>${placeName}</strong><br>Hotel accommodation offering comfort and convenience in ${city}`;\r\n    }\r\n  }\r\n\r\n  if (\r\n    name.includes(\"park\") ||\r\n    name.includes(\"garden\") ||\r\n    name.includes(\"nature\") ||\r\n    name.includes(\"forest\") ||\r\n    name.includes(\"beach\")\r\n  ) {\r\n    if (name.includes(\"botanical\") || name.includes(\"garden\")) {\r\n      return `🌳 <strong>${placeName}</strong><br>Botanical garden featuring diverse plant collections and peaceful walking paths`;\r\n    } else if (name.includes(\"national\") || name.includes(\"forest\")) {\r\n      return `🌲 <strong>${placeName}</strong><br>National park with hiking trails and natural beauty`;\r\n    } else if (name.includes(\"beach\")) {\r\n      return `🏖️ <strong>${placeName}</strong><br>Beautiful beach area perfect for relaxation and water activities`;\r\n    } else {\r\n      return `🌳 <strong>${placeName}</strong><br>Public park offering green spaces and recreational activities in ${city}`;\r\n    }\r\n  }\r\n\r\n  if (\r\n    name.includes(\"church\") ||\r\n    name.includes(\"cathedral\") ||\r\n    name.includes(\"temple\") ||\r\n    name.includes(\"mosque\") ||\r\n    name.includes(\"synagogue\")\r\n  ) {\r\n    if (name.includes(\"cathedral\")) {\r\n      return `⛪ <strong>${placeName}</strong><br>Historic cathedral with stunning architecture and religious significance`;\r\n    } else if (name.includes(\"temple\")) {\r\n      return `🕉️ <strong>${placeName}</strong><br>Sacred temple representing spiritual heritage in ${city}`;\r\n    } else {\r\n      return `⛪ <strong>${placeName}</strong><br>Historic church with cultural and architectural importance`;\r\n    }\r\n  }\r\n\r\n  if (\r\n    name.includes(\"shop\") ||\r\n    name.includes(\"market\") ||\r\n    name.includes(\"mall\") ||\r\n    name.includes(\"store\") ||\r\n    name.includes(\"boutique\")\r\n  ) {\r\n    if (name.includes(\"market\")) {\r\n      return `🛒 <strong>${placeName}</strong><br>Local market offering fresh produce and traditional goods`;\r\n    } else if (name.includes(\"boutique\")) {\r\n      return `👗 <strong>${placeName}</strong><br>Boutique shop featuring unique fashion and local crafts`;\r\n    } else {\r\n      return `🛍️ <strong>${placeName}</strong><br>Shopping destination for local goods and souvenirs in ${city}`;\r\n    }\r\n  }\r\n\r\n  if (\r\n    name.includes(\"theater\") ||\r\n    name.includes(\"cinema\") ||\r\n    name.includes(\"concert\") ||\r\n    name.includes(\"show\") ||\r\n    name.includes(\"entertainment\")\r\n  ) {\r\n    if (name.includes(\"theater\") || name.includes(\"theatre\")) {\r\n      return `🎭 <strong>${placeName}</strong><br>Theater venue hosting plays, performances, and cultural events`;\r\n    } else if (name.includes(\"cinema\") || name.includes(\"movie\")) {\r\n      return `🎬 <strong>${placeName}</strong><br>Cinema showing latest films and cultural screenings`;\r\n    } else {\r\n      return `🎪 <strong>${placeName}</strong><br>Entertainment venue for shows, concerts, and performances`;\r\n    }\r\n  }\r\n\r\n  // Default for other attractions - try to be more specific based on name\r\n  if (name.includes(\"castle\") || name.includes(\"fortress\")) {\r\n    return `🏰 <strong>${placeName}</strong><br>Historic castle/fortress with rich history and architectural beauty`;\r\n  } else if (name.includes(\"tower\") || name.includes(\"monument\")) {\r\n    return `🗼 <strong>${placeName}</strong><br>Iconic landmark and monument representing ${city}'s heritage`;\r\n  } else if (name.includes(\"square\") || name.includes(\"plaza\")) {\r\n    return `🏛️ <strong>${placeName}</strong><br>Historic square/plaza in the heart of ${city}`;\r\n  } else {\r\n    return `🎯 <strong>${placeName}</strong><br>Notable attraction worth visiting during your time in ${city}`;\r\n  }\r\n};\r\n\r\nfunction Chat({ destination, days, onBackToWelcome }) {\r\n  const [messages, setMessages] = useState([]);\r\n  const [inputMessage, setInputMessage] = useState(\"\");\r\n  const [mapCenter, setMapCenter] = useState([51.505, -0.09]); // Default to London\r\n  const [destinationMarker, setDestinationMarker] = useState(null);\r\n  const [placeMarkers, setPlaceMarkers] = useState([]);\r\n  // Store refs for each marker by place name\r\n  const markerRefs = useRef({});\r\n  const messagesEndRef = React.useRef(null);\r\n  const itineraryRunRef = React.useRef(\"\");\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  // Extract place names from text (format: **PlaceName**)\r\n  const extractPlaceNames = (text) => {\r\n    console.log(\"Extracting place names from text:\", text);\r\n    const regex = /\\*\\*(.*?)\\*\\*/g;\r\n    const matches = [];\r\n    let match;\r\n    while ((match = regex.exec(text)) !== null) {\r\n      matches.push(match[1].trim());\r\n    }\r\n    console.log(\"Found matches:\", matches);\r\n    return matches;\r\n  };\r\n\r\n  // Extract place descriptions from AI response text\r\n  const extractPlaceDescriptions = (text, placeNames) => {\r\n    const descriptions = {};\r\n\r\n    // Split text into sentences for better parsing\r\n    const sentences = text\r\n      .split(/[.!?]+/)\r\n      .map((s) => s.trim())\r\n      .filter((s) => s.length > 0);\r\n\r\n    placeNames.forEach((placeName) => {\r\n      // Look for sentences that mention this place\r\n      const relevantSentences = sentences.filter((sentence) =>\r\n        sentence.toLowerCase().includes(placeName.toLowerCase())\r\n      );\r\n\r\n      if (relevantSentences.length > 0) {\r\n        // Take the first relevant sentence and clean it up\r\n        let description = relevantSentences[0];\r\n\r\n        // Remove the place name from the beginning if it's there\r\n        description = description\r\n          .replace(new RegExp(`\\\\*\\\\*${placeName}\\\\*\\\\*`, \"gi\"), \"\")\r\n          .trim();\r\n\r\n        // Remove colons from the description\r\n        description = description.replace(/:/g, \"\");\r\n\r\n        // Remove common prefixes\r\n        description = description.replace(\r\n          /^(is|are|was|were|has|have|had|will|would|can|could|should|may|might)\\s+/i,\r\n          \"\"\r\n        );\r\n\r\n        // Capitalize first letter\r\n        description =\r\n          description.charAt(0).toUpperCase() + description.slice(1);\r\n\r\n        // Use the entire first sentence (no length limit)\r\n        descriptions[placeName] = description;\r\n      }\r\n    });\r\n\r\n    console.log(\"Extracted place descriptions:\", descriptions);\r\n    return descriptions;\r\n  };\r\n\r\n  // Format message text to highlight only found place names (case-insensitive)\r\n  const formatMessageText = (text, foundPlaces = []) => {\r\n    if (foundPlaces.length === 0) {\r\n      // If no places were found, don't highlight any\r\n      return text.replace(/\\*\\*(.*?)\\*\\*/g, \"$1\");\r\n    }\r\n\r\n    // Only highlight places that were actually found on the map (case-insensitive)\r\n    const foundLower = foundPlaces.map((p) => p.toLowerCase());\r\n    return text.replace(/\\*\\*(.*?)\\*\\*/g, (match, placeName) => {\r\n      const trimmedPlaceName = placeName.trim();\r\n      if (foundLower.includes(trimmedPlaceName.toLowerCase())) {\r\n        // Add a clickable span with a data attribute\r\n        return `<span class=\"place-name clickable-place\" data-place=\"${trimmedPlaceName}\">${placeName}</span>`;\r\n      } else {\r\n        return placeName; // Don't highlight if not found\r\n      }\r\n    });\r\n  };\r\n\r\n  // Format itinerary into HTML grouped by days, each item on a new line\r\n  const formatItineraryToHtml = (rawText) => {\r\n    if (!rawText) return \"\";\r\n    const normalized = rawText.replace(/\\r\\n/g, \"\\n\");\r\n    const lines = normalized\r\n      .split(\"\\n\")\r\n      .map((l) => l.replace(/^\\s*###\\s*/i, \"\").trim()); // remove leading ###\r\n\r\n    const daySections = [];\r\n    let current = null;\r\n    const dayHeaderRegex = /^#*\\s*day\\s*(\\d+)(?::|-)?\\s*(.*)$/i;\r\n\r\n    const pushCurrent = () => {\r\n      if (current) {\r\n        // Remove empty items\r\n        current.items = current.items.filter((i) => i.trim().length > 0);\r\n        daySections.push(current);\r\n        current = null;\r\n      }\r\n    };\r\n\r\n    for (let rawLine of lines) {\r\n      if (!rawLine) continue;\r\n      // Remove leading bullet markers for both headers and items, e.g. \"* Day 1:\" or \"- Visit ...\"\r\n      let line = rawLine.replace(/^[-*•]\\s*/, \"\").trim();\r\n      if (!line) continue;\r\n      const m = line.match(dayHeaderRegex);\r\n      if (m) {\r\n        pushCurrent();\r\n        const dayNum = m[1];\r\n        const rest = (m[2] || \"\").trim();\r\n        current = {\r\n          title: `Day ${dayNum}${rest ? `: ${rest}` : \"\"}`,\r\n          items: [],\r\n        };\r\n        continue;\r\n      }\r\n      // Ignore preface lines before the first Day header\r\n      if (!current) continue;\r\n      // Treat bullet points or sentences as items\r\n      const cleaned = line.replace(/^[-*•]\\s*/, \"\");\r\n      current.items.push(cleaned);\r\n    }\r\n    pushCurrent();\r\n\r\n    if (daySections.length === 0) {\r\n      return normalized\r\n        .split(\"\\n\")\r\n        .filter((l) => l.trim().length > 0)\r\n        .map((l) => l.replace(/^\\s*###\\s*/i, \"\"))\r\n        .join(\"<br/>\");\r\n    }\r\n\r\n    const html = daySections\r\n      .map((d) => {\r\n        const itemsHtml = d.items.join(\"<br/>\");\r\n        return `<p style=\\\"margin: 0 0 14px 0;\\\"><strong>${d.title}</strong><br/>${itemsHtml}</p>`;\r\n      })\r\n      .join(\"\\n\");\r\n    return html;\r\n  };\r\n\r\n  // Geocode multiple places and add them to the map (parallelized for speed)\r\n  const geocodePlaces = async (placeNames, placeDescriptions = {}) => {\r\n    console.log(\"Geocoding places (parallel):\", placeNames);\r\n    console.log(\"Place descriptions:\", placeDescriptions);\r\n    const newMarkers = [];\r\n    const foundPlaces = [];\r\n\r\n    // Helper to geocode a single place (same logic as before)\r\n    const geocodeSinglePlace = async (placeName) => {\r\n      try {\r\n        // Always include city and country in search queries\r\n        const city = destination;\r\n        const country = \"Lithuania\";\r\n        const searchQueries = [\r\n          `${placeName}, ${city}, ${country}`,\r\n          `${placeName}, ${city}`,\r\n          `${placeName} ${city} ${country}`,\r\n          `${placeName} ${city}`,\r\n          `${placeName}`,\r\n        ];\r\n        if (placeName.toLowerCase().includes(\"museum\")) {\r\n          const nameWithoutMuseum = placeName.replace(/museum/gi, \"\").trim();\r\n          if (nameWithoutMuseum) {\r\n            searchQueries.push(`${nameWithoutMuseum}, ${city}, ${country}`);\r\n            searchQueries.push(`${nameWithoutMuseum} museum, ${city}, ${country}`);\r\n            searchQueries.push(`${nameWithoutMuseum}, ${city}`);\r\n          }\r\n          const mainName = placeName.split(\":\")[0].split(\"(\")[0].trim();\r\n          if (mainName !== placeName) {\r\n            searchQueries.push(`${mainName}, ${city}, ${country}`);\r\n            searchQueries.push(`${mainName} museum, ${city}, ${country}`);\r\n            searchQueries.push(`${mainName}, ${city}`);\r\n          }\r\n        }\r\n        let found = false;\r\n        for (const query of searchQueries) {\r\n          const response = await fetch(\r\n            `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}&limit=5&addressdetails=1`\r\n          );\r\n          const data = await response.json();\r\n          if (data && data.length > 0) {\r\n            // Filter by address details for exact city and country match\r\n            const localResults = data.filter((item) => {\r\n              const addressDetails = item.address || {};\r\n              const cityMatch = addressDetails.city?.toLowerCase() === city.toLowerCase() ||\r\n                addressDetails.town?.toLowerCase() === city.toLowerCase() ||\r\n                addressDetails.village?.toLowerCase() === city.toLowerCase() ||\r\n                addressDetails.municipality?.toLowerCase() === city.toLowerCase();\r\n              const countryMatch = addressDetails.country?.toLowerCase() === country.toLowerCase();\r\n              return cityMatch && countryMatch;\r\n            });\r\n            const resultsToUse = localResults.length > 0 ? localResults : data;\r\n            const bestMatch =\r\n              resultsToUse.find(\r\n                (item) =>\r\n                  item.display_name.toLowerCase().includes(placeName.toLowerCase()) ||\r\n                  item.display_name.toLowerCase().includes(city.toLowerCase())\r\n              ) || resultsToUse[0];\r\n            if (bestMatch) {\r\n              const { lat, lon, display_name } = bestMatch;\r\n              const coordinates = [parseFloat(lat), parseFloat(lon)];\r\n              newMarkers.push({\r\n                position: coordinates,\r\n                popup: `${placeName}<br><small>${display_name}</small>`,\r\n                type: \"place\",\r\n                placeName: placeName,\r\n                fullAddress: display_name,\r\n                aiDescription: placeDescriptions[placeName] || null,\r\n              });\r\n              foundPlaces.push(placeName);\r\n              found = true;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        if (!found) {\r\n          // Fallback: Try to find any museum in the destination city\r\n          if (placeName.toLowerCase().includes(\"museum\")) {\r\n            try {\r\n              const fallbackResponse = await fetch(\r\n                `https://nominatim.openstreetmap.org/search?format=json&q=museum+${encodeURIComponent(destination)}+lithuania&limit=5&addressdetails=1`\r\n              );\r\n              const fallbackData = await fallbackResponse.json();\r\n              if (fallbackData && fallbackData.length > 0) {\r\n                const availableMuseums = fallbackData.filter(\r\n                  (museum) =>\r\n                    !newMarkers.some((marker) =>\r\n                      marker.popup.toLowerCase().includes(\r\n                        museum.display_name.toLowerCase().split(\",\")[0].toLowerCase()\r\n                      )\r\n                    )\r\n                );\r\n                if (availableMuseums.length > 0) {\r\n                  const museum = availableMuseums[0];\r\n                  const coordinates = [parseFloat(museum.lat), parseFloat(museum.lon)];\r\n                  newMarkers.push({\r\n                    position: coordinates,\r\n                    popup: `${placeName} (${museum.display_name.split(\",\")[0]})<br><small>${museum.display_name}</small>`,\r\n                    type: \"place\",\r\n                    placeName: placeName,\r\n                    fullAddress: museum.display_name,\r\n                    aiDescription: placeDescriptions[placeName] || null,\r\n                  });\r\n                  foundPlaces.push(placeName);\r\n                }\r\n              }\r\n            } catch (fallbackError) { }\r\n          } else {\r\n            try {\r\n              const generalFallbackResponse = await fetch(\r\n                `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(placeName)}+${encodeURIComponent(destination)}+lithuania&limit=3&addressdetails=1`\r\n              );\r\n              const generalFallbackData = await generalFallbackResponse.json();\r\n              if (generalFallbackData && generalFallbackData.length > 0) {\r\n                const localFallbackResults = generalFallbackData.filter((item) => {\r\n                  const address = item.display_name.toLowerCase();\r\n                  return (\r\n                    address.includes(destination.toLowerCase()) &&\r\n                    (address.includes(\"lithuania\") || address.includes(\"lt\"))\r\n                  );\r\n                });\r\n                if (localFallbackResults.length > 0) {\r\n                  const fallbackItem = localFallbackResults[0];\r\n                  const coordinates = [parseFloat(fallbackItem.lat), parseFloat(fallbackItem.lon)];\r\n                  newMarkers.push({\r\n                    position: coordinates,\r\n                    popup: `${placeName}<br><small>${fallbackItem.display_name}</small>`,\r\n                    type: \"place\",\r\n                    placeName: placeName,\r\n                    fullAddress: fallbackItem.display_name,\r\n                    aiDescription: placeDescriptions[placeName] || null,\r\n                  });\r\n                  foundPlaces.push(placeName);\r\n                }\r\n              }\r\n            } catch (generalFallbackError) { }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        // Ignore error for this place\r\n      }\r\n    };\r\n\r\n    // Limit concurrency to 3 geocoding requests at a time\r\n    const concurrency = 3;\r\n    let idx = 0;\r\n    const results = [];\r\n    async function runBatch() {\r\n      const batch = [];\r\n      for (let i = 0; i < concurrency && idx < placeNames.length; i++, idx++) {\r\n        batch.push(geocodeSinglePlace(placeNames[idx]));\r\n      }\r\n      await Promise.all(batch);\r\n      if (idx < placeNames.length) {\r\n        // Small delay between batches to avoid rate limiting\r\n        await new Promise((resolve) => setTimeout(resolve, 300));\r\n        return runBatch();\r\n      }\r\n    }\r\n    await runBatch();\r\n\r\n    if (newMarkers.length > 0) {\r\n      setPlaceMarkers((prev) => {\r\n        // Deduplicate by placeName\r\n        const allMarkers = [...prev, ...newMarkers];\r\n        const seen = new Set();\r\n        return allMarkers.filter(m => {\r\n          if (seen.has(m.placeName)) return false;\r\n          seen.add(m.placeName);\r\n          return true;\r\n        });\r\n      });\r\n      console.log(`✅ Added ${newMarkers.length} new markers to map`);\r\n      console.log(`   Markers added:`, newMarkers.map((m) => m.placeName));\r\n    } else {\r\n      console.log(\"❌ No new markers were added\");\r\n    }\r\n    const notFoundPlaces = placeNames.filter((name) => !foundPlaces.includes(name));\r\n    if (notFoundPlaces.length > 0) {\r\n      console.log(`⚠️ Places mentioned in chat but not found on map:`, notFoundPlaces);\r\n    }\r\n    console.log(\"✅ Found places for highlighting:\", foundPlaces);\r\n    return foundPlaces;\r\n  };\r\n\r\n  // Geocode destination to get coordinates\r\n  const geocodeDestination = React.useCallback(\r\n    async (destinationName) => {\r\n      try {\r\n        console.log(\"Geocoding destination:\", destinationName);\r\n        const response = await fetch(\r\n          `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(\r\n            destinationName\r\n          )}&limit=1`\r\n        );\r\n        const data = await response.json();\r\n        console.log(\"Geocoding response:\", data);\r\n\r\n        if (data && data.length > 0) {\r\n          const { lat, lon } = data[0];\r\n          const coordinates = [parseFloat(lat), parseFloat(lon)];\r\n          console.log(\"Found coordinates:\", coordinates);\r\n\r\n          // Update map center to destination\r\n          setMapCenter(coordinates);\r\n\r\n          // Set destination marker only\r\n          setDestinationMarker({\r\n            position: coordinates,\r\n            popup: `${destinationName} - Your destination for ${days} days`,\r\n            type: \"destination\",\r\n            placeName: destinationName,\r\n            fullAddress: `${destinationName}, ${data[0].display_name}`,\r\n          });\r\n\r\n          return coordinates;\r\n        } else {\r\n          console.log(\"No results found for:\", destinationName);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Geocoding error:\", error);\r\n      }\r\n      return null;\r\n    },\r\n    [days]\r\n  );\r\n\r\n  useEffect(() => {\r\n    // Geocode destination and update map\r\n    if (destination) {\r\n      geocodeDestination(destination);\r\n    }\r\n\r\n    // Generate an initial AI itinerary and place it above the welcome message\r\n    (async () => {\r\n      if (!destination || !days) return;\r\n      const runKey = `${String(destination).trim().toLowerCase()}|${String(\r\n        days\r\n      ).trim()}`;\r\n      if (itineraryRunRef.current === runKey) {\r\n        console.log(\"⏭️ Skipping duplicate itinerary generation for\", runKey);\r\n        return;\r\n      }\r\n      itineraryRunRef.current = runKey;\r\n      try {\r\n        // Show a loading message at the top\r\n        setMessages([\r\n          {\r\n            id: 0,\r\n            text: \"Generating your itinerary...\",\r\n            sender: \"ai\",\r\n            timestamp: new Date().toLocaleTimeString(),\r\n            isLoading: true,\r\n          },\r\n        ]);\r\n\r\n        console.log(\"🔰 Starting itinerary generation for\", destination, days);\r\n\r\n        const itineraryPrompt = `Create a concise, practical ${days}-day travel itinerary for ${destination}.\r\n\r\nREQUIREMENTS:\r\n- Only include places in or very near ${destination}\r\n- For every attraction, museum, park, restaurant, cafe, bar, etc., wrap the exact place name in **double asterisks** like **Exact Place Name**\r\n- Provide 3-6 items per day, with short descriptions (1 sentence each)\r\n- Mix of sights, food, and optional evening ideas where appropriate\r\n- No generic placeholders; use real places in ${destination}\r\n- Keep it compact and readable\r\n`;\r\n\r\n        const response = await fetch(\"http://localhost:8080/api/chat\", {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({ message: itineraryPrompt }),\r\n        });\r\n\r\n        if (!response.ok) throw new Error(`HTTP error ${response.status}`);\r\n        const data = await response.json();\r\n\r\n        // Extract and geocode places from itinerary\r\n        const placeNames = extractPlaceNames(data.message);\r\n        const placeDescriptions = extractPlaceDescriptions(\r\n          data.message,\r\n          placeNames\r\n        );\r\n\r\n        let foundPlaces = [];\r\n        if (placeNames.length > 0) {\r\n          foundPlaces = await geocodePlaces(placeNames, placeDescriptions);\r\n        }\r\n\r\n        // Replace loading with itinerary (formatted) followed by a single welcome message\r\n        const welcomeMessage = {\r\n          id: 1,\r\n          text: `Welcome! I'll help you plan your ${days}-day trip to ${destination}. What would you like to know about your destination?`,\r\n          sender: \"ai\",\r\n          timestamp: new Date().toLocaleTimeString(),\r\n          isWelcome: true,\r\n        };\r\n        setMessages([\r\n          {\r\n            id: 0,\r\n            text: `Here is a suggested ${days}-day itinerary for ${destination}:<br/><br/>${formatItineraryToHtml(\r\n              data.message\r\n            )}`,\r\n            sender: \"ai\",\r\n            timestamp: new Date().toLocaleTimeString(),\r\n            foundPlaces,\r\n            isItinerary: true,\r\n          },\r\n          welcomeMessage,\r\n        ]);\r\n      } catch (err) {\r\n        console.error(\"Failed to generate itinerary:\", err);\r\n        // Replace loading with an error notice and a single welcome message\r\n        const welcomeMessage = {\r\n          id: 1,\r\n          text: `Welcome! I'll help you plan your ${days}-day trip to ${destination}. What would you like to know about your destination?`,\r\n          sender: \"ai\",\r\n          timestamp: new Date().toLocaleTimeString(),\r\n          isWelcome: true,\r\n        };\r\n        setMessages([\r\n          {\r\n            id: 0,\r\n            text: \"Could not generate itinerary automatically. You can ask for suggestions in the chat.\",\r\n            sender: \"ai\",\r\n            timestamp: new Date().toLocaleTimeString(),\r\n          },\r\n          welcomeMessage,\r\n        ]);\r\n      }\r\n    })();\r\n  }, [destination, days, geocodeDestination]);\r\n\r\n  // Handler to open marker popup when a highlighted place name is clicked\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n\r\n    const handleClick = (e) => {\r\n      const target = e.target;\r\n      if (target.classList.contains(\"clickable-place\")) {\r\n        const placeName = target.getAttribute(\"data-place\");\r\n        // Find the marker ref and open its popup\r\n        const ref = markerRefs.current[placeName];\r\n        if (ref && ref.current && ref.current.openPopup) {\r\n          ref.current.openPopup();\r\n        }\r\n      }\r\n    };\r\n    document.addEventListener(\"click\", handleClick);\r\n    return () => {\r\n      document.removeEventListener(\"click\", handleClick);\r\n    };\r\n  }, [messages, placeMarkers]);\r\n\r\n  const handleSendMessage = async (e) => {\r\n    e.preventDefault();\r\n    if (!inputMessage.trim()) return;\r\n\r\n    const newMessage = {\r\n      id: messages.length + 1,\r\n      text: inputMessage,\r\n      sender: \"user\",\r\n      timestamp: new Date().toLocaleTimeString(),\r\n    };\r\n\r\n    setMessages([...messages, newMessage]);\r\n    const userMessage = inputMessage;\r\n    setInputMessage(\"\");\r\n\r\n    // Add loading message\r\n    const loadingMessage = {\r\n      id: messages.length + 2,\r\n      text: \"LaWander is thinking...\",\r\n      sender: \"ai\",\r\n      timestamp: new Date().toLocaleTimeString(),\r\n      isLoading: true,\r\n    };\r\n    setMessages((prev) => [...prev, loadingMessage]);\r\n\r\n    try {\r\n      // Add destination context to the message with more specific instructions\r\n      const contextualMessage = `Context: The user is planning a ${days}-day trip to ${destination}. \r\n\r\nIMPORTANT INSTRUCTIONS:\r\n- If the user asks for a specific type of place (restaurants, museums, hotels, etc.), ONLY provide places of that exact type\r\n- ALL places must be located in or very near ${destination}\r\n- When mentioning places, use the format **PlaceName** for each place\r\n- Be specific and accurate about locations - only include places that are actually in ${destination}\r\n- For each place you mention, provide a brief description (1-2 sentences) about what makes it special or what it offers\r\n- Include practical information like cuisine type, atmosphere, or unique features\r\n\r\nUser question: ${userMessage}`;\r\n\r\n      // Call backend API\r\n      const response = await fetch(\"http://localhost:8080/api/chat\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          message: contextualMessage,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      // Extract place names from AI response (format: **PlaceName**)\r\n      const placeNames = extractPlaceNames(data.message);\r\n      console.log(\"AI Response:\", data.message);\r\n      console.log(\"Extracted place names:\", placeNames);\r\n\r\n      // Extract place descriptions from AI response\r\n      const placeDescriptions = extractPlaceDescriptions(\r\n        data.message,\r\n        placeNames\r\n      );\r\n\r\n      // Geocode the places and add them to the map\r\n      let foundPlaces = [];\r\n      if (placeNames.length > 0) {\r\n        console.log(\"Starting geocoding for\", placeNames.length, \"places\");\r\n        foundPlaces = await geocodePlaces(placeNames, placeDescriptions);\r\n      } else {\r\n        console.log(\"No place names found in AI response\");\r\n      }\r\n\r\n      // Remove loading message and add real response\r\n      setMessages((prev) => {\r\n        const withoutLoading = prev.filter((msg) => !msg.isLoading);\r\n        const aiResponse = {\r\n          id: withoutLoading.length + 1,\r\n          text: data.message,\r\n          sender: \"ai\",\r\n          timestamp: new Date().toLocaleTimeString(),\r\n          foundPlaces: foundPlaces, // Store found places for highlighting\r\n        };\r\n        return [...withoutLoading, aiResponse];\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error calling chat API:\", error);\r\n\r\n      // Remove loading message and add error response\r\n      setMessages((prev) => {\r\n        const withoutLoading = prev.filter((msg) => !msg.isLoading);\r\n        const errorResponse = {\r\n          id: withoutLoading.length + 1,\r\n          text: \"Sorry, I'm having trouble connecting to the server. Please try again later.\",\r\n          sender: \"ai\",\r\n          timestamp: new Date().toLocaleTimeString(),\r\n        };\r\n        return [...withoutLoading, errorResponse];\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-app\">\r\n      <div className=\"chat-header\">\r\n        <div className=\"header-left\">\r\n          <button className=\"back-button\" onClick={onBackToWelcome}>\r\n            ← Change Trip\r\n          </button>\r\n          <h1 className=\"chat-title\">LaWander</h1>\r\n        </div>\r\n        <div className=\"trip-info\">\r\n          <span className=\"destination\">{destination}</span>\r\n          <span className=\"days\">{days} days</span>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"chat-container\">\r\n        <div className=\"chat-window\">\r\n          <div className=\"messages-container\">\r\n            {messages.map((message) => (\r\n              <div\r\n                key={message.id}\r\n                className={`message ${message.sender === \"user\" ? \"user-message\" : \"ai-message\"\r\n                  }`}\r\n              >\r\n                <div\r\n                  className={`message-content ${message.isLoading ? \"loading\" : \"\"\r\n                    } ${message.isItinerary ? \"itinerary\" : \"\"}`}\r\n                >\r\n                  <p\r\n                    dangerouslySetInnerHTML={{\r\n                      __html: formatMessageText(\r\n                        message.text,\r\n                        message.foundPlaces\r\n                      ),\r\n                    }}\r\n                  ></p>\r\n                  <span className=\"message-time\">{message.timestamp}</span>\r\n                </div>\r\n              </div>\r\n            ))}\r\n            <div ref={messagesEndRef} />\r\n          </div>\r\n\r\n          <form className=\"message-form\" onSubmit={handleSendMessage}>\r\n            <input\r\n              type=\"text\"\r\n              value={inputMessage}\r\n              onChange={(e) => setInputMessage(e.target.value)}\r\n              placeholder=\"Ask about your destination...\"\r\n              className=\"message-input\"\r\n            />\r\n            <button type=\"submit\" className=\"send-button\">\r\n              Send\r\n            </button>\r\n          </form>\r\n        </div>\r\n\r\n        <div className=\"map-container\">\r\n          <MapContainer\r\n            key={`${mapCenter[0]}-${mapCenter[1]}`}\r\n            center={mapCenter}\r\n            zoom={13}\r\n            style={{ height: \"100%\", width: \"100%\" }}\r\n          >\r\n            <TileLayer\r\n              attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            />\r\n            {/* Render destination marker first if exists */}\r\n            {destinationMarker && (() => {\r\n              const colorInfo = getMarkerColor(destinationMarker.type, destinationMarker.placeName);\r\n              const popupContent = `🏙️ <strong>${destinationMarker.placeName}</strong><br><small>Your destination for ${days} days</small>`;\r\n              return (\r\n                <Marker\r\n                  key={\"destination\"}\r\n                  position={destinationMarker.position}\r\n                  icon={createCustomIcon(colorInfo.color, colorInfo.emoji)}\r\n                >\r\n                  <Popup>\r\n                    <div dangerouslySetInnerHTML={{ __html: popupContent }} />\r\n                  </Popup>\r\n                </Marker>\r\n              );\r\n            })()}\r\n            {/* Render place markers */}\r\n            {placeMarkers.map((marker, index) => {\r\n              const colorInfo = getMarkerColor(marker.type, marker.placeName);\r\n              let popupContent;\r\n              if (marker.aiDescription) {\r\n                popupContent = `${colorInfo.emoji} <strong>${marker.placeName}</strong><br>${marker.aiDescription}`;\r\n              } else {\r\n                const description = getPlaceDescription(\r\n                  marker.placeName,\r\n                  marker.fullAddress\r\n                );\r\n                popupContent = description;\r\n              }\r\n              // Create a ref for each marker\r\n              if (!markerRefs.current[marker.placeName]) {\r\n                markerRefs.current[marker.placeName] = React.createRef();\r\n              }\r\n              return (\r\n                <Marker\r\n                  key={marker.placeName + index}\r\n                  position={marker.position}\r\n                  icon={createCustomIcon(colorInfo.color, colorInfo.emoji)}\r\n                  ref={markerRefs.current[marker.placeName]}\r\n                >\r\n                  <Popup>\r\n                    <div dangerouslySetInnerHTML={{ __html: popupContent }} />\r\n                  </Popup>\r\n                </Marker>\r\n              );\r\n            })}\r\n          </MapContainer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}