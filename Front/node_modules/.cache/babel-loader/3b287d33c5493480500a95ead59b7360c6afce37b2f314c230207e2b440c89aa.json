{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Deividas\\\\...MyProjects\\\\LaWander\\\\Front\\\\src\\\\pages\\\\Chat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"../css/chat.css\";\n\n// Fix for default markers in react-leaflet\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require(\"leaflet/dist/images/marker-icon-2x.png\"),\n  iconUrl: require(\"leaflet/dist/images/marker-icon.png\"),\n  shadowUrl: require(\"leaflet/dist/images/marker-shadow.png\")\n});\n\n// Create custom colored icons for different marker types\nconst createCustomIcon = (color, emoji = \"📍\") => {\n  return L.divIcon({\n    className: \"custom-marker\",\n    html: `\n      <div style=\"\n        background-color: ${color};\n        width: 25px;\n        height: 25px;\n        border-radius: 50% 50% 50% 0;\n        transform: rotate(-45deg);\n        border: 2px solid white;\n        box-shadow: 0 2px 4px rgba(0,0,0,0.3);\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      \">\n        <div style=\"\n          transform: rotate(45deg);\n          color: white;\n          font-size: 12px;\n          font-weight: bold;\n        \">${emoji}</div>\n      </div>\n    `,\n    iconSize: [25, 25],\n    iconAnchor: [12, 24],\n    popupAnchor: [0, -24]\n  });\n};\n\n// Color scheme for different place types\nconst getMarkerColor = (placeType, placeName) => {\n  const name = placeName.toLowerCase();\n  if (placeType === \"destination\") {\n    return {\n      color: \"#ff69b4\",\n      emoji: \"🏙️\"\n    };\n  }\n  if (name.includes(\"museum\") || name.includes(\"gallery\") || name.includes(\"castle\") || name.includes(\"exhibition\")) {\n    return {\n      color: \"#8B4513\",\n      emoji: \"🏛️\"\n    };\n  }\n  if (name.includes(\"restaurant\") || name.includes(\"cafe\") || name.includes(\"bar\") || name.includes(\"food\") || name.includes(\"dining\") || name.includes(\"kitchen\") || name.includes(\"pub\") || name.includes(\"grille\") || name.includes(\"dinner\") || name.includes(\"grill\") || name.includes(\"club\")) {\n    return {\n      color: \"#DC143C\",\n      emoji: \"🍽️\"\n    };\n  }\n  if (name.includes(\"hotel\") || name.includes(\"accommodation\") || name.includes(\"hostel\") || name.includes(\"resort\") || name.includes(\"lodge\")) {\n    return {\n      color: \"#4169E1\",\n      emoji: \"🏨\"\n    };\n  }\n  if (name.includes(\"park\") || name.includes(\"garden\") || name.includes(\"nature\") || name.includes(\"forest\") || name.includes(\"beach\")) {\n    return {\n      color: \"#228B22\",\n      emoji: \"🌳\"\n    };\n  }\n  if (name.includes(\"church\") || name.includes(\"cathedral\") || name.includes(\"temple\") || name.includes(\"monastery\") || name.includes(\"mosque\") || name.includes(\"synagogue\")) {\n    return {\n      color: \"#9370DB\",\n      emoji: \"⛪\"\n    };\n  }\n  if (name.includes(\"shop\") || name.includes(\"market\") || name.includes(\"mall\") || name.includes(\"store\") || name.includes(\"boutique\")) {\n    return {\n      color: \"#FF8C00\",\n      emoji: \"🛍️\"\n    };\n  }\n  if (name.includes(\"theater\") || name.includes(\"cinema\") || name.includes(\"concert\") || name.includes(\"show\") || name.includes(\"entertainment\")) {\n    return {\n      color: \"#FF1493\",\n      emoji: \"🎭\"\n    };\n  }\n  return {\n    color: \"#1E90FF\",\n    emoji: \"🎯\"\n  };\n};\n\n// Generate specific description for popup\nconst getPlaceDescription = (placeName, fullAddress) => {\n  var _addressParts, _addressParts2;\n  const name = placeName.toLowerCase();\n  const addressParts = fullAddress.split(\",\");\n  const city = ((_addressParts = addressParts[addressParts.length - 3]) === null || _addressParts === void 0 ? void 0 : _addressParts.trim()) || ((_addressParts2 = addressParts[addressParts.length - 2]) === null || _addressParts2 === void 0 ? void 0 : _addressParts2.trim()) || \"Unknown\";\n  if (name.includes(\"museum\") || name.includes(\"gallery\") || name.includes(\"exhibition\")) {\n    if (name.includes(\"art\")) {\n      return `🏛️ <strong>${placeName}</strong><br>Art museum featuring local and international collections in ${city}`;\n    } else if (name.includes(\"history\") || name.includes(\"historical\")) {\n      return `🏛️ <strong>${placeName}</strong><br>Historical museum showcasing ${city}'s rich heritage and culture`;\n    } else if (name.includes(\"science\") || name.includes(\"natural\")) {\n      return `🏛️ <strong>${placeName}</strong><br>Science museum with interactive exhibits and natural history displays`;\n    } else {\n      return `🏛️ <strong>${placeName}</strong><br>Cultural institution featuring art, history, and science exhibits in ${city}`;\n    }\n  }\n  if (name.includes(\"restaurant\") || name.includes(\"cafe\") || name.includes(\"bar\") || name.includes(\"food\") || name.includes(\"dining\") || name.includes(\"kitchen\")) {\n    if (name.includes(\"cafe\") || name.includes(\"coffee\")) {\n      return `☕ <strong>${placeName}</strong><br>Cozy cafe perfect for coffee, light meals, and relaxation in ${city}`;\n    } else if (name.includes(\"bar\") || name.includes(\"pub\")) {\n      return `🍺 <strong>${placeName}</strong><br>Local bar/pub offering drinks and traditional ${city} atmosphere`;\n    } else {\n      return `🍽️ <strong>${placeName}</strong><br>Restaurant serving local cuisine and specialties in ${city}`;\n    }\n  }\n  if (name.includes(\"hotel\") || name.includes(\"accommodation\") || name.includes(\"hostel\") || name.includes(\"resort\") || name.includes(\"lodge\")) {\n    if (name.includes(\"hostel\")) {\n      return `🏨 <strong>${placeName}</strong><br>Budget-friendly hostel accommodation in the heart of ${city}`;\n    } else if (name.includes(\"resort\")) {\n      return `🏨 <strong>${placeName}</strong><br>Luxury resort with amenities and services in ${city}`;\n    } else {\n      return `🏨 <strong>${placeName}</strong><br>Hotel accommodation offering comfort and convenience in ${city}`;\n    }\n  }\n  if (name.includes(\"park\") || name.includes(\"garden\") || name.includes(\"nature\") || name.includes(\"forest\") || name.includes(\"beach\")) {\n    if (name.includes(\"botanical\") || name.includes(\"garden\")) {\n      return `🌳 <strong>${placeName}</strong><br>Botanical garden featuring diverse plant collections and peaceful walking paths`;\n    } else if (name.includes(\"national\") || name.includes(\"forest\")) {\n      return `🌲 <strong>${placeName}</strong><br>National park with hiking trails and natural beauty`;\n    } else if (name.includes(\"beach\")) {\n      return `🏖️ <strong>${placeName}</strong><br>Beautiful beach area perfect for relaxation and water activities`;\n    } else {\n      return `🌳 <strong>${placeName}</strong><br>Public park offering green spaces and recreational activities in ${city}`;\n    }\n  }\n  if (name.includes(\"church\") || name.includes(\"cathedral\") || name.includes(\"temple\") || name.includes(\"mosque\") || name.includes(\"synagogue\")) {\n    if (name.includes(\"cathedral\")) {\n      return `⛪ <strong>${placeName}</strong><br>Historic cathedral with stunning architecture and religious significance`;\n    } else if (name.includes(\"temple\")) {\n      return `🕉️ <strong>${placeName}</strong><br>Sacred temple representing spiritual heritage in ${city}`;\n    } else {\n      return `⛪ <strong>${placeName}</strong><br>Historic church with cultural and architectural importance`;\n    }\n  }\n  if (name.includes(\"shop\") || name.includes(\"market\") || name.includes(\"mall\") || name.includes(\"store\") || name.includes(\"boutique\")) {\n    if (name.includes(\"market\")) {\n      return `🛒 <strong>${placeName}</strong><br>Local market offering fresh produce and traditional goods`;\n    } else if (name.includes(\"boutique\")) {\n      return `👗 <strong>${placeName}</strong><br>Boutique shop featuring unique fashion and local crafts`;\n    } else {\n      return `🛍️ <strong>${placeName}</strong><br>Shopping destination for local goods and souvenirs in ${city}`;\n    }\n  }\n  if (name.includes(\"theater\") || name.includes(\"cinema\") || name.includes(\"concert\") || name.includes(\"show\") || name.includes(\"entertainment\")) {\n    if (name.includes(\"theater\") || name.includes(\"theatre\")) {\n      return `🎭 <strong>${placeName}</strong><br>Theater venue hosting plays, performances, and cultural events`;\n    } else if (name.includes(\"cinema\") || name.includes(\"movie\")) {\n      return `🎬 <strong>${placeName}</strong><br>Cinema showing latest films and cultural screenings`;\n    } else {\n      return `🎪 <strong>${placeName}</strong><br>Entertainment venue for shows, concerts, and performances`;\n    }\n  }\n  if (name.includes(\"castle\") || name.includes(\"fortress\")) {\n    return `🏰 <strong>${placeName}</strong><br>Historic castle/fortress with rich history and architectural beauty`;\n  } else if (name.includes(\"tower\") || name.includes(\"monument\")) {\n    return `🗼 <strong>${placeName}</strong><br>Iconic landmark and monument representing ${city}'s heritage`;\n  } else if (name.includes(\"square\") || name.includes(\"plaza\")) {\n    return `🏛️ <strong>${placeName}</strong><br>Historic square/plaza in the heart of ${city}`;\n  } else {\n    return `🎯 <strong>${placeName}</strong><br>Notable attraction worth visiting during your time in ${city}`;\n  }\n};\nfunction Chat({\n  destination,\n  days,\n  onBackToWelcome\n}) {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputMessage, setInputMessage] = useState(\"\");\n  const [mapCenter, setMapCenter] = useState([51.505, -0.09]);\n  const [destinationMarker, setDestinationMarker] = useState(null);\n  const [placeMarkers, setPlaceMarkers] = useState([]);\n  const markerRefs = useRef({});\n  const messagesEndRef = React.useRef(null);\n  const itineraryRunRef = React.useRef(\"\");\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n  const extractPlaceNames = text => {\n    console.log(\"Extracting place names from text:\", text);\n    const regex = /\\*\\*(.*?)\\*\\*/g;\n    const matches = [];\n    let match;\n    while ((match = regex.exec(text)) !== null) {\n      matches.push(match[1].trim());\n    }\n    console.log(\"Found matches:\", matches);\n    return matches;\n  };\n  const extractPlaceDescriptions = (text, placeNames) => {\n    const descriptions = {};\n    const sentences = text.split(/[.!?]+/).map(s => s.trim()).filter(s => s.length > 0);\n    placeNames.forEach(placeName => {\n      const relevantSentences = sentences.filter(sentence => sentence.toLowerCase().includes(placeName.toLowerCase()));\n      if (relevantSentences.length > 0) {\n        let description = relevantSentences[0];\n        description = description.replace(new RegExp(`\\\\*\\\\*${placeName}\\\\*\\\\*`, \"gi\"), \"\").trim();\n        description = description.replace(/:/g, \"\");\n        description = description.replace(/^(is|are|was|were|has|have|had|will|would|can|could|should|may|might)\\s+/i, \"\");\n        description = description.charAt(0).toUpperCase() + description.slice(1);\n        descriptions[placeName] = description;\n      }\n    });\n    console.log(\"Extracted place descriptions:\", descriptions);\n    return descriptions;\n  };\n  const formatMessageText = (text, foundPlaces = []) => {\n    if (foundPlaces.length === 0) {\n      return text.replace(/\\*\\*(.*?)\\*\\*/g, \"$1\");\n    }\n    const foundLower = foundPlaces.map(p => p.toLowerCase());\n    return text.replace(/\\*\\*(.*?)\\*\\*/g, (match, placeName) => {\n      const trimmedPlaceName = placeName.trim();\n      if (foundLower.includes(trimmedPlaceName.toLowerCase())) {\n        return `<span class=\"place-name clickable-place\" data-place=\"${trimmedPlaceName}\">${placeName}</span>`;\n      } else {\n        return placeName;\n      }\n    });\n  };\n  const formatItineraryToHtml = rawText => {\n    if (!rawText) return \"\";\n    const normalized = rawText.replace(/\\r\\n/g, \"\\n\");\n    const lines = normalized.split(\"\\n\").map(l => l.replace(/^\\s*###\\s*/i, \"\").trim());\n    const daySections = [];\n    let current = null;\n    const dayHeaderRegex = /^#*\\s*day\\s*(\\d+)(?::|-)?\\s*(.*)$/i;\n    const pushCurrent = () => {\n      if (current) {\n        current.items = current.items.filter(i => i.trim().length > 0);\n        daySections.push(current);\n        current = null;\n      }\n    };\n    for (let rawLine of lines) {\n      if (!rawLine) continue;\n      let line = rawLine.replace(/^[-*•]\\s*/, \"\").trim();\n      if (!line) continue;\n      const m = line.match(dayHeaderRegex);\n      if (m) {\n        pushCurrent();\n        const dayNum = m[1];\n        const rest = (m[2] || \"\").trim();\n        current = {\n          title: `Day ${dayNum}${rest ? `: ${rest}` : \"\"}`,\n          items: []\n        };\n        continue;\n      }\n      if (!current) continue;\n      const cleaned = line.replace(/^[-*•]\\s*/, \"\");\n      current.items.push(cleaned);\n    }\n    pushCurrent();\n    if (daySections.length === 0) {\n      return normalized.split(\"\\n\").filter(l => l.trim().length > 0).map(l => l.replace(/^\\s*###\\s*/i, \"\")).join(\"<br/>\");\n    }\n    const html = daySections.map(d => {\n      const itemsHtml = d.items.join(\"<br/>\");\n      return `<p style=\"margin: 0 0 14px 0;\"><strong>${d.title}</strong><br/>${itemsHtml}</p>`;\n    }).join(\"\\n\");\n    return html;\n  };\n  const geocodePlaces = async (placeNames, placeDescriptions = {}, destCoords = null) => {\n    console.log(\"=== GEOCODING PLACES ===\");\n    console.log(\"Place names:\", placeNames);\n    console.log(\"Destination coords:\", destCoords);\n    if (!destCoords) {\n      console.error(\"❌ CRITICAL: No destination coordinates provided - cannot filter places!\");\n      return [];\n    }\n    const newMarkers = [];\n    const foundPlaces = [];\n    const geocodeSinglePlace = async placeName => {\n      try {\n        const city = destination;\n        console.log(`\\n🔍 Geocoding: \"${placeName}\"`);\n\n        // Create multiple query variations\n        const searchQueries = [];\n\n        // For museums, try without \"Museum\" first\n        if (placeName.toLowerCase().includes(\"museum\")) {\n          const nameWithoutMuseum = placeName.replace(/museum/gi, \"\").trim();\n          searchQueries.push(`${nameWithoutMuseum} ${city}`);\n          searchQueries.push(`${nameWithoutMuseum} Anykščiai`); // with Lithuanian chars\n          searchQueries.push(`museum ${city}`);\n        }\n\n        // Try exact name with city\n        searchQueries.push(`${placeName} ${city}`);\n        searchQueries.push(`${placeName} Anykščiai`);\n\n        // Try without city (broader search)\n        searchQueries.push(placeName);\n\n        // Try generic fallbacks for types\n        const lowerName = placeName.toLowerCase();\n        if (lowerName.includes(\"church\") || lowerName.includes(\"matthew\")) {\n          searchQueries.push(`church ${city}`);\n          searchQueries.push(`bažnyčia Anykščiai`); // church in Lithuanian\n        }\n        if (lowerName.includes(\"park\")) {\n          searchQueries.push(`park ${city}`);\n          searchQueries.push(`${city} regional park`);\n        }\n        if (lowerName.includes(\"restaurant\") || lowerName.includes(\"cafe\")) {\n          searchQueries.push(`restaurant ${city}`);\n          searchQueries.push(`cafe ${city}`);\n        }\n        if (lowerName.includes(\"spa\")) {\n          searchQueries.push(`spa ${city}`);\n          searchQueries.push(`SPA Vilnius ${city}`);\n        }\n        if (lowerName.includes(\"stone\") || lowerName.includes(\"puntukas\")) {\n          searchQueries.push(`Puntukas ${city}`);\n          searchQueries.push(`Puntukas stone`);\n        }\n        if (lowerName.includes(\"tree\") || lowerName.includes(\"canopy\") || lowerName.includes(\"treetop\")) {\n          searchQueries.push(`treetop path ${city}`);\n          searchQueries.push(`laju takas`);\n        }\n        const calculateDistance = (lat1, lon1, lat2, lon2) => {\n          const R = 6371;\n          const dLat = (lat2 - lat1) * Math.PI / 180;\n          const dLon = (lon2 - lon1) * Math.PI / 180;\n          const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n          const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n          return R * c;\n        };\n        let found = false;\n        for (const query of searchQueries) {\n          console.log(`   Trying: \"${query}\"`);\n          const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}&limit=15&addressdetails=1`);\n          const data = await response.json();\n          if (data && data.length > 0) {\n            console.log(`   → Got ${data.length} results`);\n            const resultsWithDistance = data.map(item => {\n              const dist = calculateDistance(destCoords[0], destCoords[1], parseFloat(item.lat), parseFloat(item.lon));\n              return {\n                ...item,\n                distance: dist\n              };\n            });\n\n            // Filter to within 50km\n            const nearbyResults = resultsWithDistance.filter(item => item.distance <= 50);\n            if (nearbyResults.length === 0) {\n              console.log(`   ❌ No results within 50km`);\n              continue;\n            }\n            console.log(`   ✓ ${nearbyResults.length} within 50km`);\n\n            // Sort by distance\n            nearbyResults.sort((a, b) => a.distance - b.distance);\n            const bestMatch = nearbyResults[0];\n            const {\n              lat,\n              lon,\n              display_name,\n              distance\n            } = bestMatch;\n            const coordinates = [parseFloat(lat), parseFloat(lon)];\n            console.log(`   ✅ FOUND: ${display_name.substring(0, 70)}`);\n            console.log(`      Distance: ${distance.toFixed(1)}km`);\n            newMarkers.push({\n              position: coordinates,\n              popup: `${placeName}<br><small>${display_name}</small>`,\n              type: \"place\",\n              placeName: placeName,\n              fullAddress: display_name,\n              aiDescription: placeDescriptions[placeName] || null\n            });\n            foundPlaces.push(placeName);\n            found = true;\n            break;\n          }\n        }\n        if (!found) {\n          console.log(`   ❌ NOT FOUND: \"${placeName}\"`);\n        }\n      } catch (error) {\n        console.error(`   ❌ ERROR: ${placeName}:`, error);\n      }\n    };\n    const concurrency = 3;\n    let idx = 0;\n    async function runBatch() {\n      const batch = [];\n      for (let i = 0; i < concurrency && idx < placeNames.length; i++, idx++) {\n        batch.push(geocodeSinglePlace(placeNames[idx]));\n      }\n      await Promise.all(batch);\n      if (idx < placeNames.length) {\n        await new Promise(resolve => setTimeout(resolve, 300));\n        return runBatch();\n      }\n    }\n    await runBatch();\n    if (newMarkers.length > 0) {\n      setPlaceMarkers(prev => {\n        const allMarkers = [...prev, ...newMarkers];\n        const seen = new Set();\n        return allMarkers.filter(m => {\n          if (seen.has(m.placeName)) return false;\n          seen.add(m.placeName);\n          return true;\n        });\n      });\n      console.log(`\\n✅ Added ${newMarkers.length} markers to map`);\n    } else {\n      console.log(\"\\n❌ No markers were added\");\n    }\n    const notFoundPlaces = placeNames.filter(name => !foundPlaces.includes(name));\n    if (notFoundPlaces.length > 0) {\n      console.log(`⚠️ Not found: ${notFoundPlaces.join(\", \")}`);\n    }\n    return foundPlaces;\n  };\n  const geocodeDestination = React.useCallback(async destinationName => {\n    try {\n      console.log(\"Geocoding destination:\", destinationName);\n      const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(destinationName)}&limit=1`);\n      const data = await response.json();\n      console.log(\"Geocoding response:\", data);\n      if (data && data.length > 0) {\n        const {\n          lat,\n          lon\n        } = data[0];\n        const coordinates = [parseFloat(lat), parseFloat(lon)];\n        console.log(\"Found coordinates:\", coordinates);\n        setMapCenter(coordinates);\n        setDestinationMarker({\n          position: coordinates,\n          popup: `${destinationName} - Your destination for ${days} days`,\n          type: \"destination\",\n          placeName: destinationName,\n          fullAddress: `${destinationName}, ${data[0].display_name}`\n        });\n        return coordinates;\n      } else {\n        console.log(\"No results found for:\", destinationName);\n      }\n    } catch (error) {\n      console.error(\"Geocoding error:\", error);\n    }\n    return null;\n  }, [days]);\n  useEffect(() => {\n    (async () => {\n      if (!destination || !days) return;\n      const runKey = `${String(destination).trim().toLowerCase()}|${String(days).trim()}`;\n      if (itineraryRunRef.current === runKey) {\n        console.log(\"⏭️ Skipping duplicate itinerary generation for\", runKey);\n        return;\n      }\n      itineraryRunRef.current = runKey;\n      try {\n        setMessages([{\n          id: 0,\n          text: \"Generating your itinerary...\",\n          sender: \"ai\",\n          timestamp: new Date().toLocaleTimeString(),\n          isLoading: true\n        }]);\n        console.log(\"🔰 Starting itinerary generation for\", destination, days);\n\n        // CRITICAL: Geocode destination FIRST and wait for it\n        const destCoords = await geocodeDestination(destination);\n        if (!destCoords) {\n          throw new Error(\"Could not geocode destination\");\n        }\n        console.log(\"✅ Destination geocoded:\", destCoords);\n        const itineraryPrompt = `Create a concise, practical ${days}-day travel itinerary for ${destination}.\n\nCRITICAL REQUIREMENTS:\n- ONLY include major, well-known attractions, landmarks, and establishments\n- Use simple, commonly-known names (e.g., \"Old Town\" not \"Historic Old Quarter\")\n- Avoid specific restaurant/cafe/bar names unless they're very famous\n- Focus on parks, churches, museums, main squares, rivers, etc.\n- For every place, wrap the name in **double asterisks**\n- Provide 3-6 items per day with short descriptions\n\nExample format:\n**Main Cathedral** - Description\n**City Park** - Description\n**Old Town Square** - Description\n`;\n        const response = await fetch(\"http://localhost:8080/api/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            message: itineraryPrompt\n          })\n        });\n        if (!response.ok) throw new Error(`HTTP error ${response.status}`);\n        const data = await response.json();\n        const placeNames = extractPlaceNames(data.message);\n        const placeDescriptions = extractPlaceDescriptions(data.message, placeNames);\n        let foundPlaces = [];\n        if (placeNames.length > 0) {\n          // Pass destination coordinates explicitly\n          foundPlaces = await geocodePlaces(placeNames, placeDescriptions, destCoords);\n        }\n        const welcomeMessage = {\n          id: 1,\n          text: `Welcome! I'll help you plan your ${days}-day trip to ${destination}. What would you like to know about your destination?`,\n          sender: \"ai\",\n          timestamp: new Date().toLocaleTimeString(),\n          isWelcome: true\n        };\n        setMessages([{\n          id: 0,\n          text: `Here is a suggested ${days}-day itinerary for ${destination}:<br/><br/>${formatItineraryToHtml(data.message)}`,\n          sender: \"ai\",\n          timestamp: new Date().toLocaleTimeString(),\n          foundPlaces,\n          isItinerary: true\n        }, welcomeMessage]);\n      } catch (err) {\n        console.error(\"Failed to generate itinerary:\", err);\n        const welcomeMessage = {\n          id: 1,\n          text: `Welcome! I'll help you plan your ${days}-day trip to ${destination}. What would you like to know about your destination?`,\n          sender: \"ai\",\n          timestamp: new Date().toLocaleTimeString(),\n          isWelcome: true\n        };\n        setMessages([{\n          id: 0,\n          text: \"Could not generate itinerary automatically. You can ask for suggestions in the chat.\",\n          sender: \"ai\",\n          timestamp: new Date().toLocaleTimeString()\n        }, welcomeMessage]);\n      }\n    })();\n  }, [destination, days, geocodeDestination]);\n  useEffect(() => {\n    scrollToBottom();\n    const handleClick = e => {\n      const target = e.target;\n      if (target.classList.contains(\"clickable-place\")) {\n        const placeName = target.getAttribute(\"data-place\");\n        const ref = markerRefs.current[placeName];\n        if (ref && ref.current && ref.current.openPopup) {\n          ref.current.openPopup();\n        }\n      }\n    };\n    document.addEventListener(\"click\", handleClick);\n    return () => {\n      document.removeEventListener(\"click\", handleClick);\n    };\n  }, [messages, placeMarkers]);\n  const handleSendMessage = async e => {\n    e.preventDefault();\n    if (!inputMessage.trim()) return;\n    const newMessage = {\n      id: messages.length + 1,\n      text: inputMessage,\n      sender: \"user\",\n      timestamp: new Date().toLocaleTimeString()\n    };\n    setMessages([...messages, newMessage]);\n    const userMessage = inputMessage;\n    setInputMessage(\"\");\n    const loadingMessage = {\n      id: messages.length + 2,\n      text: \"LaWander is thinking...\",\n      sender: \"ai\",\n      timestamp: new Date().toLocaleTimeString(),\n      isLoading: true\n    };\n    setMessages(prev => [...prev, loadingMessage]);\n    try {\n      const contextualMessage = `Context: The user is planning a ${days}-day trip to ${destination}. \n\nIMPORTANT INSTRUCTIONS:\n- If the user asks for a specific type of place (restaurants, museums, hotels, etc.), ONLY provide places of that exact type\n- ALL places must be located in or very near ${destination}\n- When mentioning places, use the format **PlaceName** for each place\n- Be specific and accurate about locations - only include places that are actually in ${destination}\n- For each place you mention, provide a brief description (1-2 sentences) about what makes it special or what it offers\n- Include practical information like cuisine type, atmosphere, or unique features\n\nUser question: ${userMessage}`;\n      const response = await fetch(\"http://localhost:8080/api/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: contextualMessage\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      const placeNames = extractPlaceNames(data.message);\n      console.log(\"AI Response:\", data.message);\n      console.log(\"Extracted place names:\", placeNames);\n      const placeDescriptions = extractPlaceDescriptions(data.message, placeNames);\n      let foundPlaces = [];\n      if (placeNames.length > 0) {\n        console.log(\"Starting geocoding for\", placeNames.length, \"places\");\n        const destCoords = destinationMarker ? destinationMarker.position : null;\n        foundPlaces = await geocodePlaces(placeNames, placeDescriptions, destCoords);\n      } else {\n        console.log(\"No place names found in AI response\");\n      }\n      setMessages(prev => {\n        const withoutLoading = prev.filter(msg => !msg.isLoading);\n        const aiResponse = {\n          id: withoutLoading.length + 1,\n          text: data.message,\n          sender: \"ai\",\n          timestamp: new Date().toLocaleTimeString(),\n          foundPlaces: foundPlaces\n        };\n        return [...withoutLoading, aiResponse];\n      });\n    } catch (error) {\n      console.error(\"Error calling chat API:\", error);\n      setMessages(prev => {\n        const withoutLoading = prev.filter(msg => !msg.isLoading);\n        const errorResponse = {\n          id: withoutLoading.length + 1,\n          text: \"Sorry, I'm having trouble connecting to the server. Please try again later.\",\n          sender: \"ai\",\n          timestamp: new Date().toLocaleTimeString()\n        };\n        return [...withoutLoading, errorResponse];\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-left\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"back-button\",\n          onClick: onBackToWelcome,\n          children: \"\\u2190 Change Trip\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 854,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"chat-title\",\n          children: \"LaWander\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 857,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 853,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"trip-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"destination\",\n          children: destination\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 860,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"days\",\n          children: [days, \" days\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 861,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 859,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 852,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-window\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages-container\",\n          children: [messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message ${message.sender === \"user\" ? \"user-message\" : \"ai-message\"}`,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `message-content ${message.isLoading ? \"loading\" : \"\"} ${message.isItinerary ? \"itinerary\" : \"\"}`,\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                dangerouslySetInnerHTML: {\n                  __html: formatMessageText(message.text, message.foundPlaces)\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 880,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"message-time\",\n                children: message.timestamp\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 888,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 875,\n              columnNumber: 17\n            }, this)\n          }, message.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 869,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 892,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 867,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"message-form\",\n          onSubmit: handleSendMessage,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: inputMessage,\n            onChange: e => setInputMessage(e.target.value),\n            placeholder: \"Ask about your destination...\",\n            className: \"message-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 896,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"send-button\",\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 903,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 895,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 866,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-container\",\n        children: /*#__PURE__*/_jsxDEV(MapContainer, {\n          center: mapCenter,\n          zoom: 13,\n          style: {\n            height: \"100%\",\n            width: \"100%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n            attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n            url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 916,\n            columnNumber: 13\n          }, this), destinationMarker && (() => {\n            const colorInfo = getMarkerColor(destinationMarker.type, destinationMarker.placeName);\n            const popupContent = `🏙️ <strong>${destinationMarker.placeName}</strong><br><small>Your destination for ${days} days</small>`;\n            return /*#__PURE__*/_jsxDEV(Marker, {\n              position: destinationMarker.position,\n              icon: createCustomIcon(colorInfo.color, colorInfo.emoji),\n              children: /*#__PURE__*/_jsxDEV(Popup, {\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  dangerouslySetInnerHTML: {\n                    __html: popupContent\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 930,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 929,\n                columnNumber: 19\n              }, this)\n            }, \"destination\", false, {\n              fileName: _jsxFileName,\n              lineNumber: 924,\n              columnNumber: 17\n            }, this);\n          })(), placeMarkers.map((marker, index) => {\n            const colorInfo = getMarkerColor(marker.type, marker.placeName);\n            let popupContent;\n            if (marker.aiDescription) {\n              popupContent = `${colorInfo.emoji} <strong>${marker.placeName}</strong><br>${marker.aiDescription}`;\n            } else {\n              const description = getPlaceDescription(marker.placeName, marker.fullAddress);\n              popupContent = description;\n            }\n            if (!markerRefs.current[marker.placeName]) {\n              markerRefs.current[marker.placeName] = /*#__PURE__*/React.createRef();\n            }\n            return /*#__PURE__*/_jsxDEV(Marker, {\n              position: marker.position,\n              icon: createCustomIcon(colorInfo.color, colorInfo.emoji),\n              ref: markerRefs.current[marker.placeName],\n              children: /*#__PURE__*/_jsxDEV(Popup, {\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  dangerouslySetInnerHTML: {\n                    __html: popupContent\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 958,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 957,\n                columnNumber: 19\n              }, this)\n            }, marker.placeName + index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 951,\n              columnNumber: 17\n            }, this);\n          })]\n        }, `${mapCenter[0]}-${mapCenter[1]}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 910,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 909,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 865,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 851,\n    columnNumber: 5\n  }, this);\n}\n_s(Chat, \"AqiR9686Kr2GkeHotaFMHNAz/MI=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","MapContainer","TileLayer","Marker","Popup","L","jsxDEV","_jsxDEV","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","createCustomIcon","color","emoji","divIcon","className","html","iconSize","iconAnchor","popupAnchor","getMarkerColor","placeType","placeName","name","toLowerCase","includes","getPlaceDescription","fullAddress","_addressParts","_addressParts2","addressParts","split","city","length","trim","Chat","destination","days","onBackToWelcome","_s","messages","setMessages","inputMessage","setInputMessage","mapCenter","setMapCenter","destinationMarker","setDestinationMarker","placeMarkers","setPlaceMarkers","markerRefs","messagesEndRef","itineraryRunRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","extractPlaceNames","text","console","log","regex","matches","match","exec","push","extractPlaceDescriptions","placeNames","descriptions","sentences","map","s","filter","forEach","relevantSentences","sentence","description","replace","RegExp","charAt","toUpperCase","slice","formatMessageText","foundPlaces","foundLower","p","trimmedPlaceName","formatItineraryToHtml","rawText","normalized","lines","l","daySections","dayHeaderRegex","pushCurrent","items","i","rawLine","line","m","dayNum","rest","title","cleaned","join","d","itemsHtml","geocodePlaces","placeDescriptions","destCoords","error","newMarkers","geocodeSinglePlace","searchQueries","nameWithoutMuseum","lowerName","calculateDistance","lat1","lon1","lat2","lon2","R","dLat","Math","PI","dLon","a","sin","cos","c","atan2","sqrt","found","query","response","fetch","encodeURIComponent","data","json","resultsWithDistance","item","dist","parseFloat","lat","lon","distance","nearbyResults","sort","b","bestMatch","display_name","coordinates","substring","toFixed","position","popup","type","aiDescription","concurrency","idx","runBatch","batch","Promise","all","resolve","setTimeout","prev","allMarkers","seen","Set","has","add","notFoundPlaces","geocodeDestination","useCallback","destinationName","runKey","String","id","sender","timestamp","Date","toLocaleTimeString","isLoading","Error","itineraryPrompt","method","headers","body","JSON","stringify","message","ok","status","welcomeMessage","isWelcome","isItinerary","err","handleClick","e","target","classList","contains","getAttribute","ref","openPopup","document","addEventListener","removeEventListener","handleSendMessage","preventDefault","newMessage","userMessage","loadingMessage","contextualMessage","withoutLoading","msg","aiResponse","errorResponse","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","dangerouslySetInnerHTML","__html","onSubmit","value","onChange","placeholder","center","zoom","style","height","width","attribution","url","colorInfo","popupContent","icon","marker","index","createRef","_c","$RefreshReg$"],"sources":["C:/Users/Deividas/...MyProjects/LaWander/Front/src/pages/Chat.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport \"../css/chat.css\";\r\n\r\n// Fix for default markers in react-leaflet\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\nL.Icon.Default.mergeOptions({\r\n  iconRetinaUrl: require(\"leaflet/dist/images/marker-icon-2x.png\"),\r\n  iconUrl: require(\"leaflet/dist/images/marker-icon.png\"),\r\n  shadowUrl: require(\"leaflet/dist/images/marker-shadow.png\"),\r\n});\r\n\r\n// Create custom colored icons for different marker types\r\nconst createCustomIcon = (color, emoji = \"📍\") => {\r\n  return L.divIcon({\r\n    className: \"custom-marker\",\r\n    html: `\r\n      <div style=\"\r\n        background-color: ${color};\r\n        width: 25px;\r\n        height: 25px;\r\n        border-radius: 50% 50% 50% 0;\r\n        transform: rotate(-45deg);\r\n        border: 2px solid white;\r\n        box-shadow: 0 2px 4px rgba(0,0,0,0.3);\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n      \">\r\n        <div style=\"\r\n          transform: rotate(45deg);\r\n          color: white;\r\n          font-size: 12px;\r\n          font-weight: bold;\r\n        \">${emoji}</div>\r\n      </div>\r\n    `,\r\n    iconSize: [25, 25],\r\n    iconAnchor: [12, 24],\r\n    popupAnchor: [0, -24],\r\n  });\r\n};\r\n\r\n// Color scheme for different place types\r\nconst getMarkerColor = (placeType, placeName) => {\r\n  const name = placeName.toLowerCase();\r\n\r\n  if (placeType === \"destination\") {\r\n    return { color: \"#ff69b4\", emoji: \"🏙️\" };\r\n  }\r\n\r\n  if (\r\n    name.includes(\"museum\") ||\r\n    name.includes(\"gallery\") ||\r\n    name.includes(\"castle\") ||\r\n    name.includes(\"exhibition\")\r\n  ) {\r\n    return { color: \"#8B4513\", emoji: \"🏛️\" };\r\n  }\r\n\r\n  if (\r\n    name.includes(\"restaurant\") ||\r\n    name.includes(\"cafe\") ||\r\n    name.includes(\"bar\") ||\r\n    name.includes(\"food\") ||\r\n    name.includes(\"dining\") ||\r\n    name.includes(\"kitchen\") ||\r\n    name.includes(\"pub\") ||\r\n    name.includes(\"grille\") ||\r\n    name.includes(\"dinner\") ||\r\n    name.includes(\"grill\") ||\r\n    name.includes(\"club\")\r\n  ) {\r\n    return { color: \"#DC143C\", emoji: \"🍽️\" };\r\n  }\r\n\r\n  if (\r\n    name.includes(\"hotel\") ||\r\n    name.includes(\"accommodation\") ||\r\n    name.includes(\"hostel\") ||\r\n    name.includes(\"resort\") ||\r\n    name.includes(\"lodge\")\r\n  ) {\r\n    return { color: \"#4169E1\", emoji: \"🏨\" };\r\n  }\r\n\r\n  if (\r\n    name.includes(\"park\") ||\r\n    name.includes(\"garden\") ||\r\n    name.includes(\"nature\") ||\r\n    name.includes(\"forest\") ||\r\n    name.includes(\"beach\")\r\n  ) {\r\n    return { color: \"#228B22\", emoji: \"🌳\" };\r\n  }\r\n\r\n  if (\r\n    name.includes(\"church\") ||\r\n    name.includes(\"cathedral\") ||\r\n    name.includes(\"temple\") ||\r\n    name.includes(\"monastery\") ||\r\n    name.includes(\"mosque\") ||\r\n    name.includes(\"synagogue\")\r\n  ) {\r\n    return { color: \"#9370DB\", emoji: \"⛪\" };\r\n  }\r\n\r\n  if (\r\n    name.includes(\"shop\") ||\r\n    name.includes(\"market\") ||\r\n    name.includes(\"mall\") ||\r\n    name.includes(\"store\") ||\r\n    name.includes(\"boutique\")\r\n  ) {\r\n    return { color: \"#FF8C00\", emoji: \"🛍️\" };\r\n  }\r\n\r\n  if (\r\n    name.includes(\"theater\") ||\r\n    name.includes(\"cinema\") ||\r\n    name.includes(\"concert\") ||\r\n    name.includes(\"show\") ||\r\n    name.includes(\"entertainment\")\r\n  ) {\r\n    return { color: \"#FF1493\", emoji: \"🎭\" };\r\n  }\r\n\r\n  return { color: \"#1E90FF\", emoji: \"🎯\" };\r\n};\r\n\r\n// Generate specific description for popup\r\nconst getPlaceDescription = (placeName, fullAddress) => {\r\n  const name = placeName.toLowerCase();\r\n\r\n  const addressParts = fullAddress.split(\",\");\r\n  const city =\r\n    addressParts[addressParts.length - 3]?.trim() ||\r\n    addressParts[addressParts.length - 2]?.trim() ||\r\n    \"Unknown\";\r\n\r\n  if (\r\n    name.includes(\"museum\") ||\r\n    name.includes(\"gallery\") ||\r\n    name.includes(\"exhibition\")\r\n  ) {\r\n    if (name.includes(\"art\")) {\r\n      return `🏛️ <strong>${placeName}</strong><br>Art museum featuring local and international collections in ${city}`;\r\n    } else if (name.includes(\"history\") || name.includes(\"historical\")) {\r\n      return `🏛️ <strong>${placeName}</strong><br>Historical museum showcasing ${city}'s rich heritage and culture`;\r\n    } else if (name.includes(\"science\") || name.includes(\"natural\")) {\r\n      return `🏛️ <strong>${placeName}</strong><br>Science museum with interactive exhibits and natural history displays`;\r\n    } else {\r\n      return `🏛️ <strong>${placeName}</strong><br>Cultural institution featuring art, history, and science exhibits in ${city}`;\r\n    }\r\n  }\r\n\r\n  if (\r\n    name.includes(\"restaurant\") ||\r\n    name.includes(\"cafe\") ||\r\n    name.includes(\"bar\") ||\r\n    name.includes(\"food\") ||\r\n    name.includes(\"dining\") ||\r\n    name.includes(\"kitchen\")\r\n  ) {\r\n    if (name.includes(\"cafe\") || name.includes(\"coffee\")) {\r\n      return `☕ <strong>${placeName}</strong><br>Cozy cafe perfect for coffee, light meals, and relaxation in ${city}`;\r\n    } else if (name.includes(\"bar\") || name.includes(\"pub\")) {\r\n      return `🍺 <strong>${placeName}</strong><br>Local bar/pub offering drinks and traditional ${city} atmosphere`;\r\n    } else {\r\n      return `🍽️ <strong>${placeName}</strong><br>Restaurant serving local cuisine and specialties in ${city}`;\r\n    }\r\n  }\r\n\r\n  if (\r\n    name.includes(\"hotel\") ||\r\n    name.includes(\"accommodation\") ||\r\n    name.includes(\"hostel\") ||\r\n    name.includes(\"resort\") ||\r\n    name.includes(\"lodge\")\r\n  ) {\r\n    if (name.includes(\"hostel\")) {\r\n      return `🏨 <strong>${placeName}</strong><br>Budget-friendly hostel accommodation in the heart of ${city}`;\r\n    } else if (name.includes(\"resort\")) {\r\n      return `🏨 <strong>${placeName}</strong><br>Luxury resort with amenities and services in ${city}`;\r\n    } else {\r\n      return `🏨 <strong>${placeName}</strong><br>Hotel accommodation offering comfort and convenience in ${city}`;\r\n    }\r\n  }\r\n\r\n  if (\r\n    name.includes(\"park\") ||\r\n    name.includes(\"garden\") ||\r\n    name.includes(\"nature\") ||\r\n    name.includes(\"forest\") ||\r\n    name.includes(\"beach\")\r\n  ) {\r\n    if (name.includes(\"botanical\") || name.includes(\"garden\")) {\r\n      return `🌳 <strong>${placeName}</strong><br>Botanical garden featuring diverse plant collections and peaceful walking paths`;\r\n    } else if (name.includes(\"national\") || name.includes(\"forest\")) {\r\n      return `🌲 <strong>${placeName}</strong><br>National park with hiking trails and natural beauty`;\r\n    } else if (name.includes(\"beach\")) {\r\n      return `🏖️ <strong>${placeName}</strong><br>Beautiful beach area perfect for relaxation and water activities`;\r\n    } else {\r\n      return `🌳 <strong>${placeName}</strong><br>Public park offering green spaces and recreational activities in ${city}`;\r\n    }\r\n  }\r\n\r\n  if (\r\n    name.includes(\"church\") ||\r\n    name.includes(\"cathedral\") ||\r\n    name.includes(\"temple\") ||\r\n    name.includes(\"mosque\") ||\r\n    name.includes(\"synagogue\")\r\n  ) {\r\n    if (name.includes(\"cathedral\")) {\r\n      return `⛪ <strong>${placeName}</strong><br>Historic cathedral with stunning architecture and religious significance`;\r\n    } else if (name.includes(\"temple\")) {\r\n      return `🕉️ <strong>${placeName}</strong><br>Sacred temple representing spiritual heritage in ${city}`;\r\n    } else {\r\n      return `⛪ <strong>${placeName}</strong><br>Historic church with cultural and architectural importance`;\r\n    }\r\n  }\r\n\r\n  if (\r\n    name.includes(\"shop\") ||\r\n    name.includes(\"market\") ||\r\n    name.includes(\"mall\") ||\r\n    name.includes(\"store\") ||\r\n    name.includes(\"boutique\")\r\n  ) {\r\n    if (name.includes(\"market\")) {\r\n      return `🛒 <strong>${placeName}</strong><br>Local market offering fresh produce and traditional goods`;\r\n    } else if (name.includes(\"boutique\")) {\r\n      return `👗 <strong>${placeName}</strong><br>Boutique shop featuring unique fashion and local crafts`;\r\n    } else {\r\n      return `🛍️ <strong>${placeName}</strong><br>Shopping destination for local goods and souvenirs in ${city}`;\r\n    }\r\n  }\r\n\r\n  if (\r\n    name.includes(\"theater\") ||\r\n    name.includes(\"cinema\") ||\r\n    name.includes(\"concert\") ||\r\n    name.includes(\"show\") ||\r\n    name.includes(\"entertainment\")\r\n  ) {\r\n    if (name.includes(\"theater\") || name.includes(\"theatre\")) {\r\n      return `🎭 <strong>${placeName}</strong><br>Theater venue hosting plays, performances, and cultural events`;\r\n    } else if (name.includes(\"cinema\") || name.includes(\"movie\")) {\r\n      return `🎬 <strong>${placeName}</strong><br>Cinema showing latest films and cultural screenings`;\r\n    } else {\r\n      return `🎪 <strong>${placeName}</strong><br>Entertainment venue for shows, concerts, and performances`;\r\n    }\r\n  }\r\n\r\n  if (name.includes(\"castle\") || name.includes(\"fortress\")) {\r\n    return `🏰 <strong>${placeName}</strong><br>Historic castle/fortress with rich history and architectural beauty`;\r\n  } else if (name.includes(\"tower\") || name.includes(\"monument\")) {\r\n    return `🗼 <strong>${placeName}</strong><br>Iconic landmark and monument representing ${city}'s heritage`;\r\n  } else if (name.includes(\"square\") || name.includes(\"plaza\")) {\r\n    return `🏛️ <strong>${placeName}</strong><br>Historic square/plaza in the heart of ${city}`;\r\n  } else {\r\n    return `🎯 <strong>${placeName}</strong><br>Notable attraction worth visiting during your time in ${city}`;\r\n  }\r\n};\r\n\r\nfunction Chat({ destination, days, onBackToWelcome }) {\r\n  const [messages, setMessages] = useState([]);\r\n  const [inputMessage, setInputMessage] = useState(\"\");\r\n  const [mapCenter, setMapCenter] = useState([51.505, -0.09]);\r\n  const [destinationMarker, setDestinationMarker] = useState(null);\r\n  const [placeMarkers, setPlaceMarkers] = useState([]);\r\n  const markerRefs = useRef({});\r\n  const messagesEndRef = React.useRef(null);\r\n  const itineraryRunRef = React.useRef(\"\");\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  const extractPlaceNames = (text) => {\r\n    console.log(\"Extracting place names from text:\", text);\r\n    const regex = /\\*\\*(.*?)\\*\\*/g;\r\n    const matches = [];\r\n    let match;\r\n    while ((match = regex.exec(text)) !== null) {\r\n      matches.push(match[1].trim());\r\n    }\r\n    console.log(\"Found matches:\", matches);\r\n    return matches;\r\n  };\r\n\r\n  const extractPlaceDescriptions = (text, placeNames) => {\r\n    const descriptions = {};\r\n\r\n    const sentences = text\r\n      .split(/[.!?]+/)\r\n      .map((s) => s.trim())\r\n      .filter((s) => s.length > 0);\r\n\r\n    placeNames.forEach((placeName) => {\r\n      const relevantSentences = sentences.filter((sentence) =>\r\n        sentence.toLowerCase().includes(placeName.toLowerCase())\r\n      );\r\n\r\n      if (relevantSentences.length > 0) {\r\n        let description = relevantSentences[0];\r\n\r\n        description = description\r\n          .replace(new RegExp(`\\\\*\\\\*${placeName}\\\\*\\\\*`, \"gi\"), \"\")\r\n          .trim();\r\n\r\n        description = description.replace(/:/g, \"\");\r\n\r\n        description = description.replace(\r\n          /^(is|are|was|were|has|have|had|will|would|can|could|should|may|might)\\s+/i,\r\n          \"\"\r\n        );\r\n\r\n        description =\r\n          description.charAt(0).toUpperCase() + description.slice(1);\r\n\r\n        descriptions[placeName] = description;\r\n      }\r\n    });\r\n\r\n    console.log(\"Extracted place descriptions:\", descriptions);\r\n    return descriptions;\r\n  };\r\n\r\n  const formatMessageText = (text, foundPlaces = []) => {\r\n    if (foundPlaces.length === 0) {\r\n      return text.replace(/\\*\\*(.*?)\\*\\*/g, \"$1\");\r\n    }\r\n\r\n    const foundLower = foundPlaces.map((p) => p.toLowerCase());\r\n    return text.replace(/\\*\\*(.*?)\\*\\*/g, (match, placeName) => {\r\n      const trimmedPlaceName = placeName.trim();\r\n      if (foundLower.includes(trimmedPlaceName.toLowerCase())) {\r\n        return `<span class=\"place-name clickable-place\" data-place=\"${trimmedPlaceName}\">${placeName}</span>`;\r\n      } else {\r\n        return placeName;\r\n      }\r\n    });\r\n  };\r\n\r\n  const formatItineraryToHtml = (rawText) => {\r\n    if (!rawText) return \"\";\r\n    const normalized = rawText.replace(/\\r\\n/g, \"\\n\");\r\n    const lines = normalized\r\n      .split(\"\\n\")\r\n      .map((l) => l.replace(/^\\s*###\\s*/i, \"\").trim());\r\n\r\n    const daySections = [];\r\n    let current = null;\r\n    const dayHeaderRegex = /^#*\\s*day\\s*(\\d+)(?::|-)?\\s*(.*)$/i;\r\n\r\n    const pushCurrent = () => {\r\n      if (current) {\r\n        current.items = current.items.filter((i) => i.trim().length > 0);\r\n        daySections.push(current);\r\n        current = null;\r\n      }\r\n    };\r\n\r\n    for (let rawLine of lines) {\r\n      if (!rawLine) continue;\r\n      let line = rawLine.replace(/^[-*•]\\s*/, \"\").trim();\r\n      if (!line) continue;\r\n      const m = line.match(dayHeaderRegex);\r\n      if (m) {\r\n        pushCurrent();\r\n        const dayNum = m[1];\r\n        const rest = (m[2] || \"\").trim();\r\n        current = {\r\n          title: `Day ${dayNum}${rest ? `: ${rest}` : \"\"}`,\r\n          items: [],\r\n        };\r\n        continue;\r\n      }\r\n      if (!current) continue;\r\n      const cleaned = line.replace(/^[-*•]\\s*/, \"\");\r\n      current.items.push(cleaned);\r\n    }\r\n    pushCurrent();\r\n\r\n    if (daySections.length === 0) {\r\n      return normalized\r\n        .split(\"\\n\")\r\n        .filter((l) => l.trim().length > 0)\r\n        .map((l) => l.replace(/^\\s*###\\s*/i, \"\"))\r\n        .join(\"<br/>\");\r\n    }\r\n\r\n    const html = daySections\r\n      .map((d) => {\r\n        const itemsHtml = d.items.join(\"<br/>\");\r\n        return `<p style=\"margin: 0 0 14px 0;\"><strong>${d.title}</strong><br/>${itemsHtml}</p>`;\r\n      })\r\n      .join(\"\\n\");\r\n    return html;\r\n  };\r\n\r\n  const geocodePlaces = async (placeNames, placeDescriptions = {}, destCoords = null) => {\r\n  console.log(\"=== GEOCODING PLACES ===\");\r\n  console.log(\"Place names:\", placeNames);\r\n  console.log(\"Destination coords:\", destCoords);\r\n  \r\n  if (!destCoords) {\r\n    console.error(\"❌ CRITICAL: No destination coordinates provided - cannot filter places!\");\r\n    return [];\r\n  }\r\n  \r\n  const newMarkers = [];\r\n  const foundPlaces = [];\r\n\r\nconst geocodeSinglePlace = async (placeName) => {\r\n  try {\r\n    const city = destination;\r\n    \r\n    console.log(`\\n🔍 Geocoding: \"${placeName}\"`);\r\n    \r\n    // Create multiple query variations\r\n    const searchQueries = [];\r\n    \r\n    // For museums, try without \"Museum\" first\r\n    if (placeName.toLowerCase().includes(\"museum\")) {\r\n      const nameWithoutMuseum = placeName.replace(/museum/gi, \"\").trim();\r\n      searchQueries.push(`${nameWithoutMuseum} ${city}`);\r\n      searchQueries.push(`${nameWithoutMuseum} Anykščiai`); // with Lithuanian chars\r\n      searchQueries.push(`museum ${city}`);\r\n    }\r\n    \r\n    // Try exact name with city\r\n    searchQueries.push(`${placeName} ${city}`);\r\n    searchQueries.push(`${placeName} Anykščiai`);\r\n    \r\n    // Try without city (broader search)\r\n    searchQueries.push(placeName);\r\n    \r\n    // Try generic fallbacks for types\r\n    const lowerName = placeName.toLowerCase();\r\n    if (lowerName.includes(\"church\") || lowerName.includes(\"matthew\")) {\r\n      searchQueries.push(`church ${city}`);\r\n      searchQueries.push(`bažnyčia Anykščiai`); // church in Lithuanian\r\n    }\r\n    if (lowerName.includes(\"park\")) {\r\n      searchQueries.push(`park ${city}`);\r\n      searchQueries.push(`${city} regional park`);\r\n    }\r\n    if (lowerName.includes(\"restaurant\") || lowerName.includes(\"cafe\")) {\r\n      searchQueries.push(`restaurant ${city}`);\r\n      searchQueries.push(`cafe ${city}`);\r\n    }\r\n    if (lowerName.includes(\"spa\")) {\r\n      searchQueries.push(`spa ${city}`);\r\n      searchQueries.push(`SPA Vilnius ${city}`);\r\n    }\r\n    if (lowerName.includes(\"stone\") || lowerName.includes(\"puntukas\")) {\r\n      searchQueries.push(`Puntukas ${city}`);\r\n      searchQueries.push(`Puntukas stone`);\r\n    }\r\n    if (lowerName.includes(\"tree\") || lowerName.includes(\"canopy\") || lowerName.includes(\"treetop\")) {\r\n      searchQueries.push(`treetop path ${city}`);\r\n      searchQueries.push(`laju takas`);\r\n    }\r\n    \r\n    const calculateDistance = (lat1, lon1, lat2, lon2) => {\r\n      const R = 6371;\r\n      const dLat = (lat2 - lat1) * Math.PI / 180;\r\n      const dLon = (lon2 - lon1) * Math.PI / 180;\r\n      const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n                Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\r\n                Math.sin(dLon/2) * Math.sin(dLon/2);\r\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n      return R * c;\r\n    };\r\n    \r\n    let found = false;\r\n    for (const query of searchQueries) {\r\n      console.log(`   Trying: \"${query}\"`);\r\n      \r\n      const response = await fetch(\r\n        `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}&limit=15&addressdetails=1`\r\n      );\r\n      const data = await response.json();\r\n      \r\n      if (data && data.length > 0) {\r\n        console.log(`   → Got ${data.length} results`);\r\n        \r\n        const resultsWithDistance = data.map(item => {\r\n          const dist = calculateDistance(\r\n            destCoords[0], destCoords[1],\r\n            parseFloat(item.lat), parseFloat(item.lon)\r\n          );\r\n          return { ...item, distance: dist };\r\n        });\r\n        \r\n        // Filter to within 50km\r\n        const nearbyResults = resultsWithDistance.filter(item => item.distance <= 50);\r\n        \r\n        if (nearbyResults.length === 0) {\r\n          console.log(`   ❌ No results within 50km`);\r\n          continue;\r\n        }\r\n        \r\n        console.log(`   ✓ ${nearbyResults.length} within 50km`);\r\n        \r\n        // Sort by distance\r\n        nearbyResults.sort((a, b) => a.distance - b.distance);\r\n        \r\n        const bestMatch = nearbyResults[0];\r\n        const { lat, lon, display_name, distance } = bestMatch;\r\n        const coordinates = [parseFloat(lat), parseFloat(lon)];\r\n        \r\n        console.log(`   ✅ FOUND: ${display_name.substring(0, 70)}`);\r\n        console.log(`      Distance: ${distance.toFixed(1)}km`);\r\n        \r\n        newMarkers.push({\r\n          position: coordinates,\r\n          popup: `${placeName}<br><small>${display_name}</small>`,\r\n          type: \"place\",\r\n          placeName: placeName,\r\n          fullAddress: display_name,\r\n          aiDescription: placeDescriptions[placeName] || null,\r\n        });\r\n        foundPlaces.push(placeName);\r\n        found = true;\r\n        break;\r\n      }\r\n    }\r\n    \r\n    if (!found) {\r\n      console.log(`   ❌ NOT FOUND: \"${placeName}\"`);\r\n    }\r\n  } catch (error) {\r\n    console.error(`   ❌ ERROR: ${placeName}:`, error);\r\n  }\r\n};\r\n\r\n  const concurrency = 3;\r\n  let idx = 0;\r\n  async function runBatch() {\r\n    const batch = [];\r\n    for (let i = 0; i < concurrency && idx < placeNames.length; i++, idx++) {\r\n      batch.push(geocodeSinglePlace(placeNames[idx]));\r\n    }\r\n    await Promise.all(batch);\r\n    if (idx < placeNames.length) {\r\n      await new Promise((resolve) => setTimeout(resolve, 300));\r\n      return runBatch();\r\n    }\r\n  }\r\n  await runBatch();\r\n\r\n  if (newMarkers.length > 0) {\r\n    setPlaceMarkers((prev) => {\r\n      const allMarkers = [...prev, ...newMarkers];\r\n      const seen = new Set();\r\n      return allMarkers.filter(m => {\r\n        if (seen.has(m.placeName)) return false;\r\n        seen.add(m.placeName);\r\n        return true;\r\n      });\r\n    });\r\n    console.log(`\\n✅ Added ${newMarkers.length} markers to map`);\r\n  } else {\r\n    console.log(\"\\n❌ No markers were added\");\r\n  }\r\n  \r\n  const notFoundPlaces = placeNames.filter((name) => !foundPlaces.includes(name));\r\n  if (notFoundPlaces.length > 0) {\r\n    console.log(`⚠️ Not found: ${notFoundPlaces.join(\", \")}`);\r\n  }\r\n  \r\n  return foundPlaces;\r\n};\r\n\r\n  const geocodeDestination = React.useCallback(\r\n    async (destinationName) => {\r\n      try {\r\n        console.log(\"Geocoding destination:\", destinationName);\r\n        const response = await fetch(\r\n          `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(\r\n            destinationName\r\n          )}&limit=1`\r\n        );\r\n        const data = await response.json();\r\n        console.log(\"Geocoding response:\", data);\r\n\r\n        if (data && data.length > 0) {\r\n          const { lat, lon } = data[0];\r\n          const coordinates = [parseFloat(lat), parseFloat(lon)];\r\n          console.log(\"Found coordinates:\", coordinates);\r\n\r\n          setMapCenter(coordinates);\r\n\r\n          setDestinationMarker({\r\n            position: coordinates,\r\n            popup: `${destinationName} - Your destination for ${days} days`,\r\n            type: \"destination\",\r\n            placeName: destinationName,\r\n            fullAddress: `${destinationName}, ${data[0].display_name}`,\r\n          });\r\n\r\n          return coordinates;\r\n        } else {\r\n          console.log(\"No results found for:\", destinationName);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Geocoding error:\", error);\r\n      }\r\n      return null;\r\n    },\r\n    [days]\r\n  );\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (!destination || !days) return;\r\n      const runKey = `${String(destination).trim().toLowerCase()}|${String(\r\n        days\r\n      ).trim()}`;\r\n      if (itineraryRunRef.current === runKey) {\r\n        console.log(\"⏭️ Skipping duplicate itinerary generation for\", runKey);\r\n        return;\r\n      }\r\n      itineraryRunRef.current = runKey;\r\n      \r\n      try {\r\n        setMessages([\r\n          {\r\n            id: 0,\r\n            text: \"Generating your itinerary...\",\r\n            sender: \"ai\",\r\n            timestamp: new Date().toLocaleTimeString(),\r\n            isLoading: true,\r\n          },\r\n        ]);\r\n\r\n        console.log(\"🔰 Starting itinerary generation for\", destination, days);\r\n\r\n        // CRITICAL: Geocode destination FIRST and wait for it\r\n        const destCoords = await geocodeDestination(destination);\r\n        \r\n        if (!destCoords) {\r\n          throw new Error(\"Could not geocode destination\");\r\n        }\r\n\r\n        console.log(\"✅ Destination geocoded:\", destCoords);\r\n\r\n        const itineraryPrompt = `Create a concise, practical ${days}-day travel itinerary for ${destination}.\r\n\r\nCRITICAL REQUIREMENTS:\r\n- ONLY include major, well-known attractions, landmarks, and establishments\r\n- Use simple, commonly-known names (e.g., \"Old Town\" not \"Historic Old Quarter\")\r\n- Avoid specific restaurant/cafe/bar names unless they're very famous\r\n- Focus on parks, churches, museums, main squares, rivers, etc.\r\n- For every place, wrap the name in **double asterisks**\r\n- Provide 3-6 items per day with short descriptions\r\n\r\nExample format:\r\n**Main Cathedral** - Description\r\n**City Park** - Description\r\n**Old Town Square** - Description\r\n`;\r\n\r\n        const response = await fetch(\"http://localhost:8080/api/chat\", {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({ message: itineraryPrompt }),\r\n        });\r\n\r\n        if (!response.ok) throw new Error(`HTTP error ${response.status}`);\r\n        const data = await response.json();\r\n\r\n        const placeNames = extractPlaceNames(data.message);\r\n        const placeDescriptions = extractPlaceDescriptions(\r\n          data.message,\r\n          placeNames\r\n        );\r\n\r\n        let foundPlaces = [];\r\n        if (placeNames.length > 0) {\r\n          // Pass destination coordinates explicitly\r\n          foundPlaces = await geocodePlaces(placeNames, placeDescriptions, destCoords);\r\n        }\r\n\r\n        const welcomeMessage = {\r\n          id: 1,\r\n          text: `Welcome! I'll help you plan your ${days}-day trip to ${destination}. What would you like to know about your destination?`,\r\n          sender: \"ai\",\r\n          timestamp: new Date().toLocaleTimeString(),\r\n          isWelcome: true,\r\n        };\r\n        setMessages([\r\n          {\r\n            id: 0,\r\n            text: `Here is a suggested ${days}-day itinerary for ${destination}:<br/><br/>${formatItineraryToHtml(\r\n              data.message\r\n            )}`,\r\n            sender: \"ai\",\r\n            timestamp: new Date().toLocaleTimeString(),\r\n            foundPlaces,\r\n            isItinerary: true,\r\n          },\r\n          welcomeMessage,\r\n        ]);\r\n      } catch (err) {\r\n        console.error(\"Failed to generate itinerary:\", err);\r\n        const welcomeMessage = {\r\n          id: 1,\r\n          text: `Welcome! I'll help you plan your ${days}-day trip to ${destination}. What would you like to know about your destination?`,\r\n          sender: \"ai\",\r\n          timestamp: new Date().toLocaleTimeString(),\r\n          isWelcome: true,\r\n        };\r\n        setMessages([\r\n          {\r\n            id: 0,\r\n            text: \"Could not generate itinerary automatically. You can ask for suggestions in the chat.\",\r\n            sender: \"ai\",\r\n            timestamp: new Date().toLocaleTimeString(),\r\n          },\r\n          welcomeMessage,\r\n        ]);\r\n      }\r\n    })();\r\n  }, [destination, days, geocodeDestination]);\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n\r\n    const handleClick = (e) => {\r\n      const target = e.target;\r\n      if (target.classList.contains(\"clickable-place\")) {\r\n        const placeName = target.getAttribute(\"data-place\");\r\n        const ref = markerRefs.current[placeName];\r\n        if (ref && ref.current && ref.current.openPopup) {\r\n          ref.current.openPopup();\r\n        }\r\n      }\r\n    };\r\n    document.addEventListener(\"click\", handleClick);\r\n    return () => {\r\n      document.removeEventListener(\"click\", handleClick);\r\n    };\r\n  }, [messages, placeMarkers]);\r\n\r\n  const handleSendMessage = async (e) => {\r\n    e.preventDefault();\r\n    if (!inputMessage.trim()) return;\r\n\r\n    const newMessage = {\r\n      id: messages.length + 1,\r\n      text: inputMessage,\r\n      sender: \"user\",\r\n      timestamp: new Date().toLocaleTimeString(),\r\n    };\r\n\r\n    setMessages([...messages, newMessage]);\r\n    const userMessage = inputMessage;\r\n    setInputMessage(\"\");\r\n\r\n    const loadingMessage = {\r\n      id: messages.length + 2,\r\n      text: \"LaWander is thinking...\",\r\n      sender: \"ai\",\r\n      timestamp: new Date().toLocaleTimeString(),\r\n      isLoading: true,\r\n    };\r\n    setMessages((prev) => [...prev, loadingMessage]);\r\n\r\n    try {\r\n      const contextualMessage = `Context: The user is planning a ${days}-day trip to ${destination}. \r\n\r\nIMPORTANT INSTRUCTIONS:\r\n- If the user asks for a specific type of place (restaurants, museums, hotels, etc.), ONLY provide places of that exact type\r\n- ALL places must be located in or very near ${destination}\r\n- When mentioning places, use the format **PlaceName** for each place\r\n- Be specific and accurate about locations - only include places that are actually in ${destination}\r\n- For each place you mention, provide a brief description (1-2 sentences) about what makes it special or what it offers\r\n- Include practical information like cuisine type, atmosphere, or unique features\r\n\r\nUser question: ${userMessage}`;\r\n\r\n      const response = await fetch(\"http://localhost:8080/api/chat\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          message: contextualMessage,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      const placeNames = extractPlaceNames(data.message);\r\n      console.log(\"AI Response:\", data.message);\r\n      console.log(\"Extracted place names:\", placeNames);\r\n\r\n      const placeDescriptions = extractPlaceDescriptions(\r\n        data.message,\r\n        placeNames\r\n      );\r\n\r\n      let foundPlaces = [];\r\n      if (placeNames.length > 0) {\r\n        console.log(\"Starting geocoding for\", placeNames.length, \"places\");\r\n        const destCoords = destinationMarker ? destinationMarker.position : null;\r\n        foundPlaces = await geocodePlaces(placeNames, placeDescriptions, destCoords);\r\n      } else {\r\n        console.log(\"No place names found in AI response\");\r\n      }\r\n\r\n      setMessages((prev) => {\r\n        const withoutLoading = prev.filter((msg) => !msg.isLoading);\r\n        const aiResponse = {\r\n          id: withoutLoading.length + 1,\r\n          text: data.message,\r\n          sender: \"ai\",\r\n          timestamp: new Date().toLocaleTimeString(),\r\n          foundPlaces: foundPlaces,\r\n        };\r\n        return [...withoutLoading, aiResponse];\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error calling chat API:\", error);\r\n\r\n      setMessages((prev) => {\r\n        const withoutLoading = prev.filter((msg) => !msg.isLoading);\r\n        const errorResponse = {\r\n          id: withoutLoading.length + 1,\r\n          text: \"Sorry, I'm having trouble connecting to the server. Please try again later.\",\r\n          sender: \"ai\",\r\n          timestamp: new Date().toLocaleTimeString(),\r\n        };\r\n        return [...withoutLoading, errorResponse];\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-app\">\r\n      <div className=\"chat-header\">\r\n        <div className=\"header-left\">\r\n          <button className=\"back-button\" onClick={onBackToWelcome}>\r\n            ← Change Trip\r\n          </button>\r\n          <h1 className=\"chat-title\">LaWander</h1>\r\n        </div>\r\n        <div className=\"trip-info\">\r\n          <span className=\"destination\">{destination}</span>\r\n          <span className=\"days\">{days} days</span>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"chat-container\">\r\n        <div className=\"chat-window\">\r\n          <div className=\"messages-container\">\r\n            {messages.map((message) => (\r\n              <div\r\n                key={message.id}\r\n                className={`message ${\r\n                  message.sender === \"user\" ? \"user-message\" : \"ai-message\"\r\n                }`}\r\n              >\r\n                <div\r\n                  className={`message-content ${\r\n                    message.isLoading ? \"loading\" : \"\"\r\n                  } ${message.isItinerary ? \"itinerary\" : \"\"}`}\r\n                >\r\n                  <p\r\n                    dangerouslySetInnerHTML={{\r\n                      __html: formatMessageText(\r\n                        message.text,\r\n                        message.foundPlaces\r\n                      ),\r\n                    }}\r\n                  ></p>\r\n                  <span className=\"message-time\">{message.timestamp}</span>\r\n                </div>\r\n              </div>\r\n            ))}\r\n            <div ref={messagesEndRef} />\r\n          </div>\r\n\r\n          <form className=\"message-form\" onSubmit={handleSendMessage}>\r\n            <input\r\n              type=\"text\"\r\n              value={inputMessage}\r\n              onChange={(e) => setInputMessage(e.target.value)}\r\n              placeholder=\"Ask about your destination...\"\r\n              className=\"message-input\"\r\n            />\r\n            <button type=\"submit\" className=\"send-button\">\r\n              Send\r\n            </button>\r\n          </form>\r\n        </div>\r\n\r\n        <div className=\"map-container\">\r\n          <MapContainer\r\n            key={`${mapCenter[0]}-${mapCenter[1]}`}\r\n            center={mapCenter}\r\n            zoom={13}\r\n            style={{ height: \"100%\", width: \"100%\" }}\r\n          >\r\n            <TileLayer\r\n              attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            />\r\n            {destinationMarker && (() => {\r\n              const colorInfo = getMarkerColor(destinationMarker.type, destinationMarker.placeName);\r\n              const popupContent = `🏙️ <strong>${destinationMarker.placeName}</strong><br><small>Your destination for ${days} days</small>`;\r\n              return (\r\n                <Marker\r\n                  key={\"destination\"}\r\n                  position={destinationMarker.position}\r\n                  icon={createCustomIcon(colorInfo.color, colorInfo.emoji)}\r\n                >\r\n                  <Popup>\r\n                    <div dangerouslySetInnerHTML={{ __html: popupContent }} />\r\n                  </Popup>\r\n                </Marker>\r\n              );\r\n            })()}\r\n            {placeMarkers.map((marker, index) => {\r\n              const colorInfo = getMarkerColor(marker.type, marker.placeName);\r\n              let popupContent;\r\n              if (marker.aiDescription) {\r\n                popupContent = `${colorInfo.emoji} <strong>${marker.placeName}</strong><br>${marker.aiDescription}`;\r\n              } else {\r\n                const description = getPlaceDescription(\r\n                  marker.placeName,\r\n                  marker.fullAddress\r\n                );\r\n                popupContent = description;\r\n              }\r\n              if (!markerRefs.current[marker.placeName]) {\r\n                markerRefs.current[marker.placeName] = React.createRef();\r\n              }\r\n              return (\r\n                <Marker\r\n                  key={marker.placeName + index}\r\n                  position={marker.position}\r\n                  icon={createCustomIcon(colorInfo.color, colorInfo.emoji)}\r\n                  ref={markerRefs.current[marker.placeName]}\r\n                >\r\n                  <Popup>\r\n                    <div dangerouslySetInnerHTML={{ __html: popupContent }} />\r\n                  </Popup>\r\n                </Marker>\r\n              );\r\n            })}\r\n          </MapContainer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Chat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}